
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Model/MiniPanel/dialog/PokerNap/PokerNap.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '24228zvZANA9qgncMTCgU85', 'PokerNap');
// Script/Model/MiniPanel/dialog/PokerNap/PokerNap.js

'use strict';

var Helper = require('Helper');

cc.Class({
	extends: cc.Component,

	properties: {
		touch: cc.Node,
		mask: cc.Node,
		toggle: cc.Toggle,
		labelBet: cc.Label,
		labelMin: cc.Label,
		labelMax: cc.Label,
		min: '',
		max: ''
	},
	init: function init(obj) {
		this.RedT = obj;
		this.betMin = obj.bet * this.min;
		this.betMax = obj.bet * this.max;
		this.h = this.betMin < 1000000 ? 1000 : 1000000;

		this.labelMin.string = this.labelBet.string = Helper.numberWithCommas(this.betMin);
		this.labelMax.string = Helper.numberWithCommas(this.betMax);
		this.betMin = this.betMin / this.h;
		this.betMax = this.betMax / this.h;

		this.toggle.isChecked = true;
	},
	onEnable: function onEnable() {
		this.node.runAction(cc.RedT.inGame.dialog.actionShow);
		this.touch.on(cc.Node.EventType.TOUCH_START, this.eventStart, this);
		this.touch.on(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
		this.touch.on(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
		this.touch.on(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
	},
	onDisable: function onDisable() {
		cc.RedT.inGame.dialog.resetSizeDialog(this.node);
		this.touch.off(cc.Node.EventType.TOUCH_START, this.eventStart, this);
		this.touch.off(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
		this.touch.off(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
		this.touch.off(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);

		this.mask.width = 0;
		this.touch.position = cc.v2(0, 0);
	},
	eventStart: function eventStart(e) {
		this.touch.runAction(cc.scaleTo(0.1, 0.7));
		this.offsetX = { localX: e.touch.getLocationX(), x: this.touch.position.x };
	},
	eventMove: function eventMove(e) {
		var x = e.touch.getLocationX() - this.offsetX.localX + this.offsetX.x;
		if (x < 0) {
			x = 0;
		} else if (x > 401) {
			x = 401;
		}
		this.mask.width = x;
		this.touch.position = cc.v2(x, 0);
		var bet = x / 401 * (this.betMax - this.betMin) + this.betMin >> 0;
		this.labelBet.string = Helper.numberWithCommas(bet * this.h);
	},
	eventEnd: function eventEnd() {
		this.touch.runAction(cc.scaleTo(0.1, 0.6));
	},
	onOkClick: function onOkClick() {
		cc.RedT.inGame.loading.active = true;
		cc.RedT.send({ g: { poker: { reg: {
						room: this.RedT.bet,
						balans: Helper.getOnlyNumberInString(this.labelBet.string),
						auto: this.toggle.isChecked
					} } } });
	},
	onCancelClick: function onCancelClick() {
		cc.RedT.inGame.dialog.onClickBack();
	}
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,