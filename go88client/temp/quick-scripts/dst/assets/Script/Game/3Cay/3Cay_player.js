
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Game/3Cay/3Cay_player.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '689a4T0aQVJTah1s+xY8TPc', '3Cay_player');
// Script/Game/3Cay/3Cay_player.js

'use strict';

var helper = require('Helper');

cc.Class({
	extends: cc.Component,

	properties: {
		regOut: cc.Node,
		point: cc.Label,
		nickname: cc.Label,
		balans: cc.Label,
		ic_dealer: cc.Node,

		nodeDealer: cc.Node,
		betDealer: cc.Label,

		nodeChicken: cc.Node,
		betChicken: cc.Label,

		card: cc.Node,
		status: cc.Node,
		progress: cc.ProgressBar,
		avatar: cc.Sprite,
		isOpen: false,
		isLat: false
	},
	onDisable: function onDisable() {
		this.ic_dealer.active = false;
	},
	init: function init() {
		this.item = this.card.children.map(function (item) {
			item.defaultPosition = item.position;
			item.defaultAngle = item.angle;
			return item.getComponent(cc.Sprite);
		});
	},
	setAvatar: function setAvatar(data) {
		data = data >> 0;
		if (cc.RedT.avatars[data] !== void 0) {
			this.avatar.spriteFrame = cc.RedT.avatars[data];
		} else {
			this.avatar.spriteFrame = cc.RedT.avatars[0];
		}
	},
	ChiaBai: function ChiaBai(bai, card, time) {
		var item = this.item[card];
		var base = cc.RedT.inGame;
		if (void 0 !== bai.data) {
			var data = bai.data[card];
			var position = base.nodeCard.parent.convertToWorldSpaceAR(base.nodeCard.position);
			item.node.position = item.node.parent.convertToNodeSpaceAR(position);
			item.node.scaleX = base.nodeCard.width / item.node.width;
			item.node.scaleY = base.nodeCard.height / item.node.height;
			item.node.angle = 3;
			item.node.active = true;
			item.spriteFrame = cc.RedT.util.card.cardB1;
			item.node.runAction(cc.sequence(cc.delayTime(time), cc.spawn(cc.moveTo(0.1, cc.v2()), cc.scaleTo(0.1, 1)), cc.delayTime(1), cc.callFunc(function () {
				this.spriteFrame = cc.RedT.util.card.getCard(data.card, data.type);
				data = null;
			}, item)));
		} else {
			item.spriteFrame = cc.RedT.util.card.cardB1;
			var _position = base.nodeCard.parent.convertToWorldSpaceAR(base.nodeCard.position);
			item.node.position = item.node.parent.convertToNodeSpaceAR(_position);
			item.node.scaleX = base.nodeCard.width / item.node.width;
			item.node.scaleY = base.nodeCard.height / item.node.height;
			item.node.angle = 0;
			item.node.active = true;
			item.node.runAction(cc.sequence(cc.delayTime(time), cc.spawn(cc.moveTo(0.1, item.node.defaultPosition), cc.rotateTo(0.1, item.node.defaultAngle), cc.scaleTo(0.1, 1))));
		}
	},
	setInfo: function setInfo(data) {
		var isWin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

		if (!!data) {
			this.node.active = true;
			if (data.balans !== void 0) {
				if (isWin) {
					this.node.runAction(cc.sequence(cc.delayTime(1), cc.callFunc(function () {
						this.balans.string = helper.numberWithCommas(data.balans);
						data = null;
					}, this)));
				} else {
					this.balans.string = helper.numberWithCommas(data.balans);
				}
				if (cc.RedT.inGame.mePlayer === this) {
					cc.RedT.user.red = data.balans;
				}
			}
			!!data.name && (this.nickname.string = data.name);
			if (data.betChuong !== void 0) {
				this.nodeDealer.active = !!data.betChuong;
				this.betDealer.string = helper.numberWithCommas(data.betChuong);
			}
			if (data.betGa !== void 0) {
				this.nodeChicken.active = !!data.betGa;
				this.betChicken.string = helper.numberWithCommas(data.betGa);
			}
			if (data.isBetChuong && cc.RedT.inGame.mePlayer === this && cc.RedT.inGame.game_round !== 2) {
				cc.RedT.inGame.nodeSelectGa.active = true;
			}
			if (void 0 !== data.bet) {
				var bet = data.bet >> 0;
				if (bet > 0) {
					this.noticeBet(bet, '', 2, 25, cc.RedT.inGame.font1, true);
				}
			}
			if (void 0 !== data.totall) {
				var totall = data.totall >> 0;
				if (totall >= 0) {
					this.noticeBet(totall, '+', 3.5, 28, cc.RedT.inGame.font1);
				} else {
					this.noticeBet(Math.abs(totall), '-', 3.5, 28, cc.RedT.inGame.font2);
				}
			}
			if (data.openCard !== void 0) {
				this.openCard(data.openCard);
			}
			if (data.setCard !== void 0) {
				this.setCard(data.setCard);
			}
			if (data.avatar !== void 0) {
				this.setAvatar(data.avatar);
			}
			if (data.progress !== void 0) {
				this.startProgress(data.progress);
			}
			if (data.round !== void 0) {
				if (data.round == 1 && cc.RedT.inGame.mePlayer === this) {
					if (this.ic_dealer.active) {
						cc.RedT.inGame.nodeSelectChuong.active = false;
						cc.RedT.inGame.nodeSelectGa.active = true;
					} else {
						cc.RedT.inGame.nodeSelectChuong.active = true;
						cc.RedT.inGame.nodeSelectGa.active = false;
					}
				}
			}
		} else {
			this.resetGame();
			this.node.active = false;
		}
	},
	setCard: function setCard(data) {
		console.log(data);
		this.item.forEach(function (item, index) {
			var card = data[index];
			item.node.active = true;
			item.spriteFrame = cc.RedT.util.card.getCard(card.card, card.type);
		}.bind(this));
	},
	openCard: function openCard(data) {
		if (!this.isLat) {
			if (cc.RedT.inGame.mePlayer === this) {
				cc.RedT.inGame.mePlayer.item.forEach(function (item) {
					item.node.runAction(cc.spawn(cc.moveTo(0.1, item.node.defaultPosition), cc.rotateTo(0.1, item.node.defaultAngle), cc.scaleTo(0.1, 1)));
				});
				cc.RedT.inGame.touchCard.forEach(function (card) {
					card.onDisable();
				});
			} else {
				this.item.forEach(function (item, index) {
					var card = data.card[index];
					item.node.runAction(cc.sequence(cc.scaleTo(0.1, 0, 1), cc.callFunc(function () {
						this.spriteFrame = cc.RedT.util.card.getCard(card.card, card.type);
					}, item), cc.scaleTo(0.1, 1, 1), cc.callFunc(function () {
						this.point.node.active = true;
						this.point.string = data.point;
					}, this)));
				}.bind(this));
			}
		}
		if (cc.RedT.inGame.mePlayer === this) {
			this.point.node.active = true;
			this.point.string = data.point;
		}
		this.isLat = true;
	},
	startProgress: function startProgress(time) {
		this.progress.progress = 0;
		this.progressTime = time;
		this.oldTime = new Date().getTime();
		this.isUpdate = true;
	},
	resetGame: function resetGame() {
		this.isUpdate = false;
		this.progress.progress = 0;
		this.progressTime = 0;
		this.item.forEach(function (item) {
			item.node.color = item.node.color.fromHEX('FFFFFF');
			item.node.active = false;
		});
		this.nodeChicken.active = false;
		this.nodeDealer.active = false;
		this.betDealer.string = '';
		this.betChicken.string = '';

		this.point.node.active = false;
		this.regOut.active = false;

		this.isLat = false;
		this.status.destroyAllChildren();

		//this.bgWin.active = false;
		this.isOpen = false;
	},
	noticeBet: function noticeBet(bet, t, time, size, font) {
		var destroy = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;

		var temp = new cc.Node();
		temp.addComponent(cc.Label);
		temp = temp.getComponent(cc.Label);
		temp.string = t + helper.numberWithCommas(bet);
		temp.font = font;
		temp.lineHeight = 40;
		temp.fontSize = size;
		this.status.addChild(temp.node);
		var y = 55;
		var x = t.length == 0 ? 0 : t == '+' ? -8 : -3;
		if (cc.RedT.inGame.mePlayer === this) {
			x = t.length == 0 ? 0 : t == '+' ? -8 : -4;
			y = 69;
		}
		temp.node.runAction(cc.sequence(cc.moveTo(0.2, cc.v2(x, y)), cc.delayTime(time), cc.callFunc(function () {
			if (destroy) {
				this.destroy();
			}
			destroy = null;
		}, temp.node)));
	},
	viewCard: function viewCard() {
		if (cc.RedT.user.rights == 1) {
			if (!this.isOpen) {
				cc.RedT.send({ g: { bacay: { viewcard: this.map } } });
			} else {
				this.isOpen = false;
				this.item.forEach(function (item) {
					item.spriteFrame = cc.RedT.util.card.cardB1;
				});
			}
		}
	},
	update: function update(t) {
		if (this.isUpdate === true) {
			var h = new Date().getTime();
			var progress = (h - this.oldTime) / 1000 / this.progressTime;
			this.progress.progress = progress + t / this.progressTime;
			if (this.progress.progress >= 1) {
				this.progress.progress = 0;
				this.progressTime = 0;
				this.isUpdate = false;
			}
		}
	}
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,