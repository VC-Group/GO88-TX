
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Game/BanCa/Fish/Fish_player.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '362a4sVh3ZMlqR1Ph1C+dSk', 'Fish_player');
// Script/Game/BanCa/Fish/Fish_player.js

'use strict';

var helper = require('Helper');

cc.Class({
	extends: cc.Component,

	properties: {
		nick: cc.Label,
		balans: cc.Label,
		bet: cc.Label,
		iconCoint: cc.Sprite,
		typeBet: 0,
		nodeChangerbet: cc.Node,
		canhs: {
			default: [],
			type: dragonBones.ArmatureDisplay
		},
		canh: dragonBones.ArmatureDisplay,

		sungs: {
			default: [],
			type: dragonBones.ArmatureDisplay
		},
		sung: dragonBones.ArmatureDisplay,

		nodeCanh: cc.Node,
		nodeSung: cc.Node,
		isFire: false,
		isLock: false,
		sungFix: 2,
		map: 0,
		money: 0
	},
	init: function init(obj) {
		this.RedT = obj;
		this.fish = null;
		this.bullet = {};
	},
	onInfo: function onInfo(data) {
		this.nick.string = data.name;
		this.balans.string = helper.numberWithCommas(data.balans);
		this.money = data.balans;
		this.bet.string = helper.numberWithCommas(this.RedT['typeBet' + this.RedT.regGame][data.typeBet]);
		this.typeBet = data.typeBet;
		this.onTypeBet(data.typeBet);
	},
	onTypeBet: function onTypeBet(type) {
		this.canhs.forEach(function (canh, index) {
			if (type === index) {
				canh.node.active = true;
			} else {
				canh.node.active = false;
			}
		});
		this.sungs.forEach(function (sung, index) {
			if (type === index) {
				sung.node.active = true;
			} else {
				sung.node.active = false;
			}
		});
		this.canh = this.canhs[type];
		this.sung = this.sungs[type];
		this.sung.node.insertChild(this.bet.node);

		var funcCanhEvent1 = function funcCanhEvent1() {
			this.canh.playAnimation(this.RedT.anim_canh[1], 0);
			this.canh.off(dragonBones.EventObject.LOOP_COMPLETE, funcCanhEvent1, this);
		};
		this.canh.on(dragonBones.EventObject.LOOP_COMPLETE, funcCanhEvent1, this);
		this.canh.playAnimation(this.RedT.anim_canh[0], 1);

		var funcSungEvent1 = function funcSungEvent1() {
			this.sung.off(dragonBones.EventObject.LOOP_COMPLETE, funcSungEvent1, this);
		};
		this.sung.on(dragonBones.EventObject.LOOP_COMPLETE, funcSungEvent1, this);
		this.sung.playAnimation(this.RedT.anim_sung[1], 1);
	},
	onChangerTypeBet: function onChangerTypeBet(type) {
		var self = this;
		var funcCanhEvent1 = function funcCanhEvent1() {
			this.canh.playAnimation(this.RedT.anim_canh[1], 0);
			this.canh.off(dragonBones.EventObject.LOOP_COMPLETE, funcCanhEvent1, this);
		};

		var funcCanhEvent2 = function funcCanhEvent2() {
			this.off(dragonBones.EventObject.LOOP_COMPLETE, funcCanhEvent2, this);

			self.canh.node.active = true;
			self.canh.on(dragonBones.EventObject.LOOP_COMPLETE, funcCanhEvent1, self);
			self.canh.playAnimation(self.RedT.anim_canh[0], 1);
		};
		this.canh.on(dragonBones.EventObject.LOOP_COMPLETE, funcCanhEvent2, this.canh);
		this.canh.playAnimation(this.RedT.anim_canh[2], 1);

		this.canh = this.canhs[type];

		var funcSungEvent1 = function funcSungEvent1() {
			this.sung.off(dragonBones.EventObject.LOOP_COMPLETE, funcSungEvent1, this);
		};

		var funcSungEvent2 = function funcSungEvent2() {
			this.off(dragonBones.EventObject.LOOP_COMPLETE, funcSungEvent2, this);

			self.sung.node.active = true;
			self.sung.on(dragonBones.EventObject.LOOP_COMPLETE, funcSungEvent1, self);
			self.sung.playAnimation(self.RedT.anim_sung[1], 1);
		};
		this.sung.on(dragonBones.EventObject.LOOP_COMPLETE, funcSungEvent2, this.sung);
		this.sung.playAnimation(this.RedT.anim_sung[2], 1);

		this.sung = this.sungs[type];
		this.sung.node.insertChild(this.bet.node);

		this.bet.string = helper.numberWithCommas(this.RedT['typeBet' + this.RedT.regGame][type]);
		this.typeBet = type;
	},
	onFire: function onFire() {
		var point = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

		var checkBet = this.RedT['typeBet' + this.RedT.regGame][this.typeBet];
		checkBet = this.money - checkBet;
		if (checkBet < 0) {
			this.RedT.dialog.showNap(true);
			if (this.RedT.Game.isAuto) {
				this.RedT.Game.onClickAuto();
			}
			this.RedT.Game.isFire = false;
			this.isLock = false;
		} else {
			if ((this.RedT.Game.isAuto || this.RedT.Game.isFire || this.isLock) && !this.isFire) {
				this.money = checkBet;
				this.balans.string = helper.numberWithCommas(checkBet);
				this.isFire = true;
				var bullet = cc.instantiate(this.RedT.Game.bullet[this.typeBet]);
				bullet = bullet.getComponent('Fish_bullet');
				var position = null;
				var lock = false;
				var ID = this.RedT.Game.bulletID++;

				this.bullet[ID] = bullet;
				if (!!point && !this.isLock) {
					position = point;
				} else {
					if (this.isLock && !!this.fish) {
						lock = true;
						var getPoint = this.fish.getPoint();
						position = getPoint.position;
						this.changerAngle(position);
						bullet.isLock = true;
						this.fish['bullet' + this.map][ID] = bullet;
						this.RedT.Game.ponit = position;
						cc.RedT.send({ g: { fish: { bullet: { id: ID, f: this.fish.id } } } });
						if (getPoint.stop === true) {
							this.fish.PhaHuy(false);
						}
					} else {
						position = this.RedT.Game.shubiao.node.position;
					}
				}
				!lock && cc.RedT.send({ g: { fish: { bullet: { id: ID, x: position.x, y: position.y } } } });
				bullet.id = ID;
				bullet.isMe = true;
				bullet.bullet = this.typeBet;
				bullet.init(this, position);

				// Audio
				var copy = cc.instantiate(this.RedT.audioFire.node);
				copy = copy.getComponent(cc.AudioSource);
				copy.volume = this.RedT.volumeHieuUng;
				this.RedT.Game.nodeAudio.addChild(copy.node);
				copy.play();

				this.RedT.Game.nodeDan.addChild(bullet.node);
				this.sung.playAnimation('fire', 1);
				setTimeout(function () {
					this.isFire = false;
					this.onFire();
				}.bind(this), this.RedT.Game.bulletSpeed);
			}
		}
	},
	otherBullet: function otherBullet(data) {
		this.balans.string = helper.numberWithCommas(data.money);
		var position = null;
		var ID = this.RedT.Game.bulletID++;
		var bullet = cc.instantiate(this.RedT.Game.bullet[this.typeBet]);
		bullet = bullet.getComponent('Fish_bullet');

		if (void 0 !== data.f) {
			var fish = this.RedT.Game.fish[data.f];
			if (void 0 === fish) {
				return void 0;
			}
			var getPoint = fish.getPoint();
			position = getPoint.position;
			bullet.isLock = true;
			fish['bullet' + this.map][ID] = bullet;
			if (getPoint.stop === true) {
				fish.PhaHuy(false);
			}
		} else {
			position = cc.v2(data.x, data.y);
		}

		bullet.init(this, position);
		bullet.bullet = this.typeBet;

		this.changerAngle(position);

		this.RedT.Game.nodeDan.addChild(bullet.node);
		this.sung.playAnimation('fire', 1);
	},
	changerAngle: function changerAngle(angle) {
		var positionUser = this.RedT.Game.node.convertToWorldSpaceAR(angle);
		var position1_1 = this.node.convertToNodeSpaceAR(positionUser);
		position1_1 = cc.misc.radiansToDegrees(Math.atan2(position1_1.x * this.RedT.Game.sungFixD[this.sungFix].x, position1_1.y * this.RedT.Game.sungFixD[this.sungFix].y));
		///**
		if (position1_1 > 90) {
			//position1_1 = 90;
			this.isLock = this.isFire = false;
		}
		if (position1_1 < -90) {
			//position1_1 = -90;
			this.isLock = this.isFire = false;
		}
		this.nodeSung.angle = position1_1;
		this.nodeCanh.angle = this.nodeSung.angle;
	},
	reset: function reset() {}
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uXFwuLlxcLi5cXC4uXFwuLlxcLi5cXC4uXFxhc3NldHNcXFNjcmlwdFxcR2FtZVxcQmFuQ2FcXEZpc2gvLi5cXC4uXFwuLlxcLi5cXC4uXFwuLlxcLi5cXGFzc2V0c1xcU2NyaXB0XFxHYW1lXFxCYW5DYVxcRmlzaC9hc3NldHNcXFNjcmlwdFxcR2FtZVxcQmFuQ2FcXEZpc2hcXEZpc2hfcGxheWVyLmpzIl0sIm5hbWVzIjpbImhlbHBlciIsInJlcXVpcmUiLCJjYyIsIkNsYXNzIiwiZXh0ZW5kcyIsIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJuaWNrIiwiTGFiZWwiLCJiYWxhbnMiLCJiZXQiLCJpY29uQ29pbnQiLCJTcHJpdGUiLCJ0eXBlQmV0Iiwibm9kZUNoYW5nZXJiZXQiLCJOb2RlIiwiY2FuaHMiLCJkZWZhdWx0IiwidHlwZSIsImRyYWdvbkJvbmVzIiwiQXJtYXR1cmVEaXNwbGF5IiwiY2FuaCIsInN1bmdzIiwic3VuZyIsIm5vZGVDYW5oIiwibm9kZVN1bmciLCJpc0ZpcmUiLCJpc0xvY2siLCJzdW5nRml4IiwibWFwIiwibW9uZXkiLCJpbml0Iiwib2JqIiwiUmVkVCIsImZpc2giLCJidWxsZXQiLCJvbkluZm8iLCJkYXRhIiwic3RyaW5nIiwibmFtZSIsIm51bWJlcldpdGhDb21tYXMiLCJyZWdHYW1lIiwib25UeXBlQmV0IiwiZm9yRWFjaCIsImluZGV4Iiwibm9kZSIsImFjdGl2ZSIsImluc2VydENoaWxkIiwiZnVuY0NhbmhFdmVudDEiLCJwbGF5QW5pbWF0aW9uIiwiYW5pbV9jYW5oIiwib2ZmIiwiRXZlbnRPYmplY3QiLCJMT09QX0NPTVBMRVRFIiwib24iLCJmdW5jU3VuZ0V2ZW50MSIsImFuaW1fc3VuZyIsIm9uQ2hhbmdlclR5cGVCZXQiLCJzZWxmIiwiZnVuY0NhbmhFdmVudDIiLCJmdW5jU3VuZ0V2ZW50MiIsIm9uRmlyZSIsInBvaW50IiwiY2hlY2tCZXQiLCJkaWFsb2ciLCJzaG93TmFwIiwiR2FtZSIsImlzQXV0byIsIm9uQ2xpY2tBdXRvIiwiaW5zdGFudGlhdGUiLCJnZXRDb21wb25lbnQiLCJwb3NpdGlvbiIsImxvY2siLCJJRCIsImJ1bGxldElEIiwiZ2V0UG9pbnQiLCJjaGFuZ2VyQW5nbGUiLCJwb25pdCIsInNlbmQiLCJnIiwiaWQiLCJmIiwic3RvcCIsIlBoYUh1eSIsInNodWJpYW8iLCJ4IiwieSIsImlzTWUiLCJjb3B5IiwiYXVkaW9GaXJlIiwiQXVkaW9Tb3VyY2UiLCJ2b2x1bWUiLCJ2b2x1bWVIaWV1VW5nIiwibm9kZUF1ZGlvIiwiYWRkQ2hpbGQiLCJwbGF5Iiwibm9kZURhbiIsInNldFRpbWVvdXQiLCJiaW5kIiwiYnVsbGV0U3BlZWQiLCJvdGhlckJ1bGxldCIsInYyIiwiYW5nbGUiLCJwb3NpdGlvblVzZXIiLCJjb252ZXJ0VG9Xb3JsZFNwYWNlQVIiLCJwb3NpdGlvbjFfMSIsImNvbnZlcnRUb05vZGVTcGFjZUFSIiwibWlzYyIsInJhZGlhbnNUb0RlZ3JlZXMiLCJNYXRoIiwiYXRhbjIiLCJzdW5nRml4RCIsInJlc2V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLElBQUlBLFNBQVNDLFFBQVEsUUFBUixDQUFiOztBQUVBQyxHQUFHQyxLQUFILENBQVM7QUFDUkMsVUFBU0YsR0FBR0csU0FESjs7QUFHUkMsYUFBWTtBQUNYQyxRQUFnQkwsR0FBR00sS0FEUjtBQUVYQyxVQUFnQlAsR0FBR00sS0FGUjtBQUdYRSxPQUFnQlIsR0FBR00sS0FIUjtBQUlYRyxhQUFnQlQsR0FBR1UsTUFKUjtBQUtYQyxXQUFnQixDQUxMO0FBTVhDLGtCQUFnQlosR0FBR2EsSUFOUjtBQU9YQyxTQUFPO0FBQ05DLFlBQVMsRUFESDtBQUVOQyxTQUFNQyxZQUFZQztBQUZaLEdBUEk7QUFXWEMsUUFBTUYsWUFBWUMsZUFYUDs7QUFhWEUsU0FBTztBQUNOTCxZQUFTLEVBREg7QUFFTkMsU0FBTUMsWUFBWUM7QUFGWixHQWJJO0FBaUJYRyxRQUFNSixZQUFZQyxlQWpCUDs7QUFtQlhJLFlBQVd0QixH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TCxHQUFjLEtBQTVCO0FBQ0E7QUFDRCxPQUFLRCxRQUFMLENBQWM2RSxLQUFkLEdBQXNCRyxXQUF0QjtBQUNBLE9BQUtqRixRQUFMLENBQWM4RSxLQUFkLEdBQXNCLEtBQUs3RSxRQUFMLENBQWM2RSxLQUFwQztBQUNBLEVBL05PO0FBZ09SVSxRQUFPLGlCQUFVLENBRWhCO0FBbE9PLENBQVQiLCJmaWxlIjoiRmlzaF9wbGF5ZXIuanMiLCJzb3VyY2VSb290IjoiLi5cXC4uXFwuLlxcLi5cXC4uXFwuLlxcLi5cXGFzc2V0c1xcU2NyaXB0XFxHYW1lXFxCYW5DYVxcRmlzaCIsInNvdXJjZXNDb250ZW50IjpbIlxyXG52YXIgaGVscGVyID0gcmVxdWlyZSgnSGVscGVyJyk7XHJcblxyXG5jYy5DbGFzcyh7XHJcblx0ZXh0ZW5kczogY2MuQ29tcG9uZW50LFxyXG5cclxuXHRwcm9wZXJ0aWVzOiB7XHJcblx0XHRuaWNrOiAgICAgICAgICAgY2MuTGFiZWwsXHJcblx0XHRiYWxhbnM6ICAgICAgICAgY2MuTGFiZWwsXHJcblx0XHRiZXQ6ICAgICAgICAgICAgY2MuTGFiZWwsXHJcblx0XHRpY29uQ29pbnQ6ICAgICAgY2MuU3ByaXRlLFxyXG5cdFx0dHlwZUJldDogICAgICAgIDAsXHJcblx0XHRub2RlQ2hhbmdlcmJldDogY2MuTm9kZSxcclxuXHRcdGNhbmhzOiB7XHJcblx0XHRcdGRlZmF1bHQ6IFtdLFxyXG5cdFx0XHR0eXBlOiBkcmFnb25Cb25lcy5Bcm1hdHVyZURpc3BsYXksXHJcblx0XHR9LFxyXG5cdFx0Y2FuaDogZHJhZ29uQm9uZXMuQXJtYXR1cmVEaXNwbGF5LFxyXG5cclxuXHRcdHN1bmdzOiB7XHJcblx0XHRcdGRlZmF1bHQ6IFtdLFxyXG5cdFx0XHR0eXBlOiBkcmFnb25Cb25lcy5Bcm1hdHVyZURpc3BsYXksXHJcblx0XHR9LFxyXG5cdFx0c3VuZzogZHJhZ29uQm9uZXMuQXJtYXR1cmVEaXNwbGF5LFxyXG5cclxuXHRcdG5vZGVDYW5oOiAgY2MuTm9kZSxcclxuXHRcdG5vZGVTdW5nOiAgY2MuTm9kZSxcclxuXHRcdGlzRmlyZTogZmFsc2UsXHJcblx0XHRpc0xvY2s6IGZhbHNlLFxyXG5cdFx0c3VuZ0ZpeDogMixcclxuXHRcdG1hcDogMCxcclxuXHRcdG1vbmV5OiAwLFxyXG5cdH0sXHJcblx0aW5pdDogZnVuY3Rpb24ob2JqKSB7XHJcblx0XHR0aGlzLlJlZFQgPSBvYmo7XHJcblx0XHR0aGlzLmZpc2ggPSBudWxsO1xyXG5cdFx0dGhpcy5idWxsZXQgPSB7fTtcclxuXHR9LFxyXG5cdG9uSW5mbzogZnVuY3Rpb24oZGF0YSl7XHJcblx0XHR0aGlzLm5pY2suc3RyaW5nICAgPSBkYXRhLm5hbWU7XHJcblx0XHR0aGlzLmJhbGFucy5zdHJpbmcgPSBoZWxwZXIubnVtYmVyV2l0aENvbW1hcyhkYXRhLmJhbGFucyk7XHJcblx0XHR0aGlzLm1vbmV5ICAgICAgICAgPSBkYXRhLmJhbGFucztcclxuXHRcdHRoaXMuYmV0LnN0cmluZyAgICA9IGhlbHBlci5udW1iZXJXaXRoQ29tbWFzKHRoaXMuUmVkVFsndHlwZUJldCcrdGhpcy5SZWRULnJlZ0dhbWVdW2RhdGEudHlwZUJldF0pO1xyXG5cdFx0dGhpcy50eXBlQmV0ICAgICAgID0gZGF0YS50eXBlQmV0O1xyXG5cdFx0dGhpcy5vblR5cGVCZXQoZGF0YS50eXBlQmV0KTtcclxuXHR9LFxyXG5cdG9uVHlwZUJldDogZnVuY3Rpb24odHlwZSl7XHJcblx0XHR0aGlzLmNhbmhzLmZvckVhY2goZnVuY3Rpb24oY2FuaCwgaW5kZXgpe1xyXG5cdFx0XHRpZiAodHlwZSA9PT0gaW5kZXgpIHtcclxuXHRcdFx0XHRjYW5oLm5vZGUuYWN0aXZlID0gdHJ1ZTtcclxuXHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0Y2FuaC5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHRoaXMuc3VuZ3MuZm9yRWFjaChmdW5jdGlvbihzdW5nLCBpbmRleCl7XHJcblx0XHRcdGlmICh0eXBlID09PSBpbmRleCkge1xyXG5cdFx0XHRcdHN1bmcubm9kZS5hY3RpdmUgPSB0cnVlO1xyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRzdW5nLm5vZGUuYWN0aXZlID0gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0dGhpcy5jYW5oID0gdGhpcy5jYW5oc1t0eXBlXTtcclxuXHRcdHRoaXMuc3VuZyA9IHRoaXMuc3VuZ3NbdHlwZV07XHJcblx0XHR0aGlzLnN1bmcubm9kZS5pbnNlcnRDaGlsZCh0aGlzLmJldC5ub2RlKTtcclxuXHJcblx0XHRsZXQgZnVuY0NhbmhFdmVudDEgPSBmdW5jdGlvbigpe1xyXG5cdFx0XHR0aGlzLmNhbmgucGxheUFuaW1hdGlvbih0aGlzLlJlZFQuYW5pbV9jYW5oWzFdLCAwKTtcclxuXHRcdFx0dGhpcy5jYW5oLm9mZihkcmFnb25Cb25lcy5FdmVudE9iamVjdC5MT09QX0NPTVBMRVRFLCBmdW5jQ2FuaEV2ZW50MSwgdGhpcyk7XHJcblx0XHR9O1xyXG5cdFx0dGhpcy5jYW5oLm9uKGRyYWdvbkJvbmVzLkV2ZW50T2JqZWN0LkxPT1BfQ09NUExFVEUsIGZ1bmNDYW5oRXZlbnQxLCB0aGlzKTtcclxuXHRcdHRoaXMuY2FuaC5wbGF5QW5pbWF0aW9uKHRoaXMuUmVkVC5hbmltX2NhbmhbMF0sIDEpO1xyXG5cclxuXHRcdGxldCBmdW5jU3VuZ0V2ZW50MSA9IGZ1bmN0aW9uKCl7XHJcblx0XHRcdHRoaXMuc3VuZy5vZmYoZHJhZ29uQm9uZXMuRXZlbnRPYmplY3QuTE9PUF9DT01QTEVURSwgZnVuY1N1bmdFdmVudDEsIHRoaXMpO1xyXG5cdFx0fTtcclxuXHRcdHRoaXMuc3VuZy5vbihkcmFnb25Cb25lcy5FdmVudE9iamVjdC5MT09QX0NPTVBMRVRFLCBmdW5jU3VuZ0V2ZW50MSwgdGhpcyk7XHJcblx0XHR0aGlzLnN1bmcucGxheUFuaW1hdGlvbih0aGlzLlJlZFQuYW5pbV9zdW5nWzFdLCAxKTtcclxuXHR9LFxyXG5cdG9uQ2hhbmdlclR5cGVCZXQ6IGZ1bmN0aW9uKHR5cGUpe1xyXG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xyXG5cdFx0bGV0IGZ1bmNDYW5oRXZlbnQxID0gZnVuY3Rpb24oKXtcclxuXHRcdFx0dGhpcy5jYW5oLnBsYXlBbmltYXRpb24odGhpcy5SZWRULmFuaW1fY2FuaFsxXSwgMCk7XHJcblx0XHRcdHRoaXMuY2FuaC5vZmYoZHJhZ29uQm9uZXMuRXZlbnRPYmplY3QuTE9PUF9DT01QTEVURSwgZnVuY0NhbmhFdmVudDEsIHRoaXMpO1xyXG5cdFx0fTtcclxuXHJcblx0XHRsZXQgZnVuY0NhbmhFdmVudDIgPSBmdW5jdGlvbigpe1xyXG5cdFx0XHR0aGlzLm9mZihkcmFnb25Cb25lcy5FdmVudE9iamVjdC5MT09QX0NPTVBMRVRFLCBmdW5jQ2FuaEV2ZW50MiwgdGhpcyk7XHJcblxyXG5cdFx0XHRzZWxmLmNhbmgubm9kZS5hY3RpdmUgPSB0cnVlO1xyXG5cdFx0XHRzZWxmLmNhbmgub24oZHJhZ29uQm9uZXMuRXZlbnRPYmplY3QuTE9PUF9DT01QTEVURSwgZnVuY0NhbmhFdmVudDEsIHNlbGYpO1xyXG5cdFx0XHRzZWxmLmNhbmgucGxheUFuaW1hdGlvbihzZWxmLlJlZFQuYW5pbV9jYW5oWzBdLCAxKTtcclxuXHRcdH07XHJcblx0XHR0aGlzLmNhbmgub24oZHJhZ29uQm9uZXMuRXZlbnRPYmplY3QuTE9PUF9DT01QTEVURSwgZnVuY0NhbmhFdmVudDIsIHRoaXMuY2FuaCk7XHJcblx0XHR0aGlzLmNhbmgucGxheUFuaW1hdGlvbih0aGlzLlJlZFQuYW5pbV9jYW5oWzJdLCAxKTtcclxuXHJcblx0XHR0aGlzLmNhbmggPSB0aGlzLmNhbmhzW3R5cGVdO1xyXG5cclxuXHRcdGxldCBmdW5jU3VuZ0V2ZW50MSA9IGZ1bmN0aW9uKCl7XHJcblx0XHRcdHRoaXMuc3VuZy5vZmYoZHJhZ29uQm9uZXMuRXZlbnRPYmplY3QuTE9PUF9DT01QTEVURSwgZnVuY1N1bmdFdmVudDEsIHRoaXMpO1xyXG5cdFx0fTtcclxuXHJcblx0XHRsZXQgZnVuY1N1bmdFdmVudDIgPSBmdW5jdGlvbigpe1xyXG5cdFx0XHR0aGlzLm9mZihkcmFnb25Cb25lcy5FdmVudE9iamVjdC5MT09QX0NPTVBMRVRFLCBmdW5jU3VuZ0V2ZW50MiwgdGhpcyk7XHJcblxyXG5cdFx0XHRzZWxmLnN1bmcubm9kZS5hY3RpdmUgPSB0cnVlO1xyXG5cdFx0XHRzZWxmLnN1bmcub24oZHJhZ29uQm9uZXMuRXZlbnRPYmplY3QuTE9PUF9DT01QTEVURSwgZnVuY1N1bmdFdmVudDEsIHNlbGYpO1xyXG5cdFx0XHRzZWxmLnN1bmcucGxheUFuaW1hdGlvbihzZWxmLlJlZFQuYW5pbV9zdW5nWzFdLCAxKTtcclxuXHRcdH07XHJcblx0XHR0aGlzLnN1bmcub24oZHJhZ29uQm9uZXMuRXZlbnRPYmplY3QuTE9PUF9DT01QTEVURSwgZnVuY1N1bmdFdmVudDIsIHRoaXMuc3VuZyk7XHJcblx0XHR0aGlzLnN1bmcucGxheUFuaW1hdGlvbih0aGlzLlJlZFQuYW5pbV9zdW5nWzJdLCAxKTtcclxuXHJcblx0XHR0aGlzLnN1bmcgPSB0aGlzLnN1bmdzW3R5cGVdO1xyXG5cdFx0dGhpcy5zdW5nLm5vZGUuaW5zZXJ0Q2hpbGQodGhpcy5iZXQubm9kZSk7XHJcblxyXG5cdFx0dGhpcy5iZXQuc3RyaW5nID0gaGVscGVyLm51bWJlcldpdGhDb21tYXModGhpcy5SZWRUWyd0eXBlQmV0Jyt0aGlzLlJlZFQucmVnR2FtZV1bdHlwZV0pO1xyXG5cdFx0dGhpcy50eXBlQmV0ICAgID0gdHlwZTtcclxuXHR9LFxyXG5cdG9uRmlyZTogZnVuY3Rpb24ocG9pbnQgPSBudWxsKXtcclxuXHRcdGxldCBjaGVja0JldCA9IHRoaXMuUmVkVFsndHlwZUJldCcrdGhpcy5SZWRULnJlZ0dhbWVdW3RoaXMudHlwZUJldF07XHJcblx0XHRjaGVja0JldCA9IHRoaXMubW9uZXktY2hlY2tCZXQ7XHJcblx0XHRpZiAoY2hlY2tCZXQgPCAwKSB7XHJcblx0XHRcdHRoaXMuUmVkVC5kaWFsb2cuc2hvd05hcCh0cnVlKTtcclxuXHRcdFx0aWYgKHRoaXMuUmVkVC5HYW1lLmlzQXV0bykge1xyXG5cdFx0XHRcdHRoaXMuUmVkVC5HYW1lLm9uQ2xpY2tBdXRvKCk7XHJcblx0XHRcdH1cclxuXHRcdFx0dGhpcy5SZWRULkdhbWUuaXNGaXJlID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuaXNMb2NrID0gZmFsc2U7XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0aWYgKCh0aGlzLlJlZFQuR2FtZS5pc0F1dG8gfHwgdGhpcy5SZWRULkdhbWUuaXNGaXJlIHx8IHRoaXMuaXNMb2NrKSAmJiAhdGhpcy5pc0ZpcmUpIHtcclxuXHRcdFx0XHR0aGlzLm1vbmV5ID0gY2hlY2tCZXQ7XHJcblx0XHRcdFx0dGhpcy5iYWxhbnMuc3RyaW5nID0gaGVscGVyLm51bWJlcldpdGhDb21tYXMoY2hlY2tCZXQpO1xyXG5cdFx0XHRcdHRoaXMuaXNGaXJlID0gdHJ1ZTtcclxuXHRcdFx0XHRsZXQgYnVsbGV0ID0gY2MuaW5zdGFudGlhdGUodGhpcy5SZWRULkdhbWUuYnVsbGV0W3RoaXMudHlwZUJldF0pO1xyXG5cdFx0XHRcdGJ1bGxldCA9IGJ1bGxldC5nZXRDb21wb25lbnQoJ0Zpc2hfYnVsbGV0Jyk7XHJcblx0XHRcdFx0bGV0IHBvc2l0aW9uID0gbnVsbDtcclxuXHRcdFx0XHRsZXQgbG9jayAgICAgPSBmYWxzZTtcclxuXHRcdFx0XHRsZXQgSUQgPSB0aGlzLlJlZFQuR2FtZS5idWxsZXRJRCsrO1xyXG5cclxuXHRcdFx0XHR0aGlzLmJ1bGxldFtJRF0gPSBidWxsZXQ7XHJcblx0XHRcdFx0aWYgKCEhcG9pbnQgJiYgIXRoaXMuaXNMb2NrKSB7XHJcblx0XHRcdFx0XHRwb3NpdGlvbiA9IHBvaW50O1xyXG5cdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0aWYgKHRoaXMuaXNMb2NrICYmICEhdGhpcy5maXNoKSB7XHJcblx0XHRcdFx0XHRcdGxvY2sgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRsZXQgZ2V0UG9pbnQgPSB0aGlzLmZpc2guZ2V0UG9pbnQoKTtcclxuXHRcdFx0XHRcdFx0cG9zaXRpb24gPSBnZXRQb2ludC5wb3NpdGlvbjtcclxuXHRcdFx0XHRcdFx0dGhpcy5jaGFuZ2VyQW5nbGUocG9zaXRpb24pO1xyXG5cdFx0XHRcdFx0XHRidWxsZXQuaXNMb2NrID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0dGhpcy5maXNoWydidWxsZXQnK3RoaXMubWFwXVtJRF0gPSBidWxsZXQ7XHJcblx0XHRcdFx0XHRcdHRoaXMuUmVkVC5HYW1lLnBvbml0ID0gcG9zaXRpb247XHJcblx0XHRcdFx0XHRcdGNjLlJlZFQuc2VuZCh7Zzp7ZmlzaDp7YnVsbGV0OntpZDpJRCwgZjp0aGlzLmZpc2guaWR9fX19KTtcclxuXHRcdFx0XHRcdFx0aWYgKGdldFBvaW50LnN0b3AgPT09IHRydWUpIHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLmZpc2guUGhhSHV5KGZhbHNlKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHRcdHBvc2l0aW9uID0gdGhpcy5SZWRULkdhbWUuc2h1Ymlhby5ub2RlLnBvc2l0aW9uO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQhbG9jayAmJiBjYy5SZWRULnNlbmQoe2c6e2Zpc2g6e2J1bGxldDp7aWQ6SUQsIHg6cG9zaXRpb24ueCwgeTpwb3NpdGlvbi55fX19fSk7XHJcblx0XHRcdFx0YnVsbGV0LmlkID0gSUQ7XHJcblx0XHRcdFx0YnVsbGV0LmlzTWUgPSB0cnVlO1xyXG5cdFx0XHRcdGJ1bGxldC5idWxsZXQgPSB0aGlzLnR5cGVCZXQ7XHJcblx0XHRcdFx0YnVsbGV0LmluaXQodGhpcywgcG9zaXRpb24pO1xyXG5cclxuXHRcdFx0XHQvLyBBdWRpb1xyXG5cdFx0XHRcdGxldCBjb3B5ID0gY2MuaW5zdGFudGlhdGUodGhpcy5SZWRULmF1ZGlvRmlyZS5ub2RlKTtcclxuXHRcdFx0XHRjb3B5ID0gY29weS5nZXRDb21wb25lbnQoY2MuQXVkaW9Tb3VyY2UpO1xyXG5cdFx0XHRcdGNvcHkudm9sdW1lID0gdGhpcy5SZWRULnZvbHVtZUhpZXVVbmc7XHJcblx0XHRcdFx0dGhpcy5SZWRULkdhbWUubm9kZUF1ZGlvLmFkZENoaWxkKGNvcHkubm9kZSk7XHJcblx0XHRcdFx0Y29weS5wbGF5KCk7XHJcblxyXG5cdFx0XHRcdHRoaXMuUmVkVC5HYW1lLm5vZGVEYW4uYWRkQ2hpbGQoYnVsbGV0Lm5vZGUpO1xyXG5cdFx0XHRcdHRoaXMuc3VuZy5wbGF5QW5pbWF0aW9uKCdmaXJlJywgMSk7XHJcblx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpe1xyXG5cdFx0XHRcdFx0dGhpcy5pc0ZpcmUgPSBmYWxzZTtcclxuXHRcdFx0XHRcdHRoaXMub25GaXJlKCk7XHJcblx0XHRcdFx0fS5iaW5kKHRoaXMpLCB0aGlzLlJlZFQuR2FtZS5idWxsZXRTcGVlZCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9LFxyXG5cdG90aGVyQnVsbGV0OiBmdW5jdGlvbihkYXRhKXtcclxuXHRcdHRoaXMuYmFsYW5zLnN0cmluZyA9IGhlbHBlci5udW1iZXJXaXRoQ29tbWFzKGRhdGEubW9uZXkpO1xyXG5cdFx0bGV0IHBvc2l0aW9uID0gbnVsbDtcclxuXHRcdGxldCBJRCA9IHRoaXMuUmVkVC5HYW1lLmJ1bGxldElEKys7XHJcblx0XHRsZXQgYnVsbGV0ID0gY2MuaW5zdGFudGlhdGUodGhpcy5SZWRULkdhbWUuYnVsbGV0W3RoaXMudHlwZUJldF0pO1xyXG5cdFx0YnVsbGV0ID0gYnVsbGV0LmdldENvbXBvbmVudCgnRmlzaF9idWxsZXQnKTtcclxuXHJcblx0XHRpZiAodm9pZCAwICE9PSBkYXRhLmYpIHtcclxuXHRcdFx0bGV0IGZpc2ggPSB0aGlzLlJlZFQuR2FtZS5maXNoW2RhdGEuZl07XHJcblx0XHRcdGlmICh2b2lkIDAgPT09IGZpc2gpIHtcclxuXHRcdFx0XHRyZXR1cm4gdm9pZCAwO1xyXG5cdFx0XHR9XHJcblx0XHRcdGxldCBnZXRQb2ludCA9IGZpc2guZ2V0UG9pbnQoKTtcclxuXHRcdFx0cG9zaXRpb24gPSBnZXRQb2ludC5wb3NpdGlvbjtcclxuXHRcdFx0YnVsbGV0LmlzTG9jayA9IHRydWU7XHJcblx0XHRcdGZpc2hbJ2J1bGxldCcrdGhpcy5tYXBdW0lEXSA9IGJ1bGxldDtcclxuXHRcdFx0aWYgKGdldFBvaW50LnN0b3AgPT09IHRydWUpIHtcclxuXHRcdFx0XHRmaXNoLlBoYUh1eShmYWxzZSk7XHJcblx0XHRcdH1cclxuXHRcdH1lbHNle1xyXG5cdFx0XHRwb3NpdGlvbiA9IGNjLnYyKGRhdGEueCwgZGF0YS55KTtcclxuXHRcdH1cclxuXHJcblx0XHRidWxsZXQuaW5pdCh0aGlzLCBwb3NpdGlvbik7XHJcblx0XHRidWxsZXQuYnVsbGV0ID0gdGhpcy50eXBlQmV0O1xyXG5cclxuXHRcdHRoaXMuY2hhbmdlckFuZ2xlKHBvc2l0aW9uKTtcclxuXHJcblx0XHR0aGlzLlJlZFQuR2FtZS5ub2RlRGFuLmFkZENoaWxkKGJ1bGxldC5ub2RlKTtcclxuXHRcdHRoaXMuc3VuZy5wbGF5QW5pbWF0aW9uKCdmaXJlJywgMSk7XHJcblx0fSxcclxuXHRjaGFuZ2VyQW5nbGU6IGZ1bmN0aW9uKGFuZ2xlKXtcclxuXHRcdGxldCBwb3NpdGlvblVzZXIgPSB0aGlzLlJlZFQuR2FtZS5ub2RlLmNvbnZlcnRUb1dvcmxkU3BhY2VBUihhbmdsZSk7XHJcblx0XHRsZXQgcG9zaXRpb24xXzEgPSB0aGlzLm5vZGUuY29udmVydFRvTm9kZVNwYWNlQVIocG9zaXRpb25Vc2VyKTtcclxuXHRcdHBvc2l0aW9uMV8xID0gY2MubWlzYy5yYWRpYW5zVG9EZWdyZWVzKE1hdGguYXRhbjIocG9zaXRpb24xXzEueCp0aGlzLlJlZFQuR2FtZS5zdW5nRml4RFt0aGlzLnN1bmdGaXhdLngsIHBvc2l0aW9uMV8xLnkqdGhpcy5SZWRULkdhbWUuc3VuZ0ZpeERbdGhpcy5zdW5nRml4XS55KSk7XHJcblx0XHQvLy8qKlxyXG5cdFx0aWYocG9zaXRpb24xXzEgPiA5MCl7XHJcblx0XHRcdC8vcG9zaXRpb24xXzEgPSA5MDtcclxuXHRcdFx0dGhpcy5pc0xvY2sgPSB0aGlzLmlzRmlyZSA9IGZhbHNlO1xyXG5cdFx0fVxyXG5cdFx0aWYocG9zaXRpb24xXzEgPCAtOTApe1xyXG5cdFx0XHQvL3Bvc2l0aW9uMV8xID0gLTkwO1xyXG5cdFx0XHR0aGlzLmlzTG9jayA9IHRoaXMuaXNGaXJlID0gZmFsc2U7XHJcblx0XHR9XHJcblx0XHR0aGlzLm5vZGVTdW5nLmFuZ2xlID0gcG9zaXRpb24xXzE7XHJcblx0XHR0aGlzLm5vZGVDYW5oLmFuZ2xlID0gdGhpcy5ub2RlU3VuZy5hbmdsZTtcclxuXHR9LFxyXG5cdHJlc2V0OiBmdW5jdGlvbigpe1xyXG5cclxuXHR9LFxyXG59KTtcclxuIl19