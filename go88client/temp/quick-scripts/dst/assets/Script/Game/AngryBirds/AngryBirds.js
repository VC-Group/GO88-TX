
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/Game/AngryBirds/AngryBirds.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '30b8fKriZRPeqMEQoyRprQy', 'AngryBirds');
// Script/Game/AngryBirds/AngryBirds.js

'use strict';

var helper = require('Helper');

var reelL = require('AngryBirds_reelsL');
var reelR = require('AngryBirds_reelsR');

cc.Class({
	extends: cc.Component,

	properties: {
		background: cc.Node,
		line: cc.Node,
		reelsL: {
			default: [],
			type: reelL
		},
		reelsR: {
			default: [],
			type: reelR
		},
		icons: {
			default: [],
			type: cc.SpriteFrame
		},
		iconsX: {
			default: [],
			type: cc.SpriteFrame
		},

		iconLPrefab: cc.Prefab,
		iconRPrefab: cc.Prefab,

		buttonSpin: cc.Node,
		buttonAuto: cc.Node,
		buttonStop: cc.Node,

		labelWin: cc.Label,
		//labelBet:    cc.Label,
		bet: cc.Node,
		notice: cc.Node,
		hu: cc.Label,
		cuoc: "",
		isAuto: false,
		isSpin: false,
		red: true
		/*room:    0,
  rooms: {
  	default: [],
  	type: cc.String,
  },*/
	},
	init: function init(obj) {
		this.RedT = obj;
		cc.RedT.setting.angrybird = cc.RedT.setting.angrybird || { scale: 1 };

		var check = localStorage.getItem('angrybird');
		if (check == "true") {
			this.node.active = true;
		}
		if (void 0 !== cc.RedT.setting.angrybird.position) {
			this.node.position = cc.RedT.setting.angrybird.position;
		}
		if (void 0 !== cc.RedT.setting.angrybird.bet && cc.RedT.setting.angrybird.bet != this.cuoc) {
			this.intChangerBet();
		}
		if (void 0 !== cc.RedT.setting.angrybird.isAuto && this.isAuto != cc.RedT.setting.angrybird.isAuto) {
			this.onClickAuto();
		}
	},
	onLoad: function onLoad() {
		var self = this;
		this.ttOffset = null;

		this.reelsL.forEach(function (reel) {
			reel.init(self);
		});
		this.reelsR.forEach(function (reelR) {
			reelR.init(self);
		});
	},

	onEnable: function onEnable() {
		this.onGetHu();
		this.background.on(cc.Node.EventType.TOUCH_START, this.eventStart, this);
		this.background.on(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
		this.background.on(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
		this.background.on(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
		// this.background.on(cc.Node.EventType.MOUSE_ENTER,  this.setTop,     this);
	},
	onDisable: function onDisable() {
		this.background.off(cc.Node.EventType.TOUCH_START, this.eventStart, this);
		this.background.off(cc.Node.EventType.TOUCH_MOVE, this.eventMove, this);
		this.background.off(cc.Node.EventType.TOUCH_END, this.eventEnd, this);
		this.background.off(cc.Node.EventType.TOUCH_CANCEL, this.eventEnd, this);
		// this.background.off(cc.Node.EventType.MOUSE_ENTER,  this.setTop,     this);
		this.onCloseGame();
	},
	eventStart: function eventStart(e) {
		this.setTop();
		this.ttOffset = cc.v2(e.touch.getLocationX() - this.node.position.x, e.touch.getLocationY() - this.node.position.y);
	},
	eventMove: function eventMove(e) {
		this.node.position = cc.v2(e.touch.getLocationX() - this.ttOffset.x, e.touch.getLocationY() - this.ttOffset.y);
	},
	eventEnd: function eventEnd() {
		cc.RedT.setting.angrybird.position = this.node.position;
	},
	setTop: function setTop() {
		cc.RedT.setting.angrybird.scale = 1;
		this.node.parent.insertChild(this.node);
		this.RedT.setTop(this.node);
	},
	openGame: function openGame() {
		cc.RedT.audio.playClick();
		if (cc.RedT.IS_LOGIN) {
			this.node.active = !0;
			localStorage.setItem('angrybird', true);
			this.setTop();
		} else cc.RedT.inGame.dialog.showSignIn();
	},
	closeGame: function closeGame() {
		this.node.active = !1;
		localStorage.setItem('angrybird', false);
	},
	intChangerBet: function intChangerBet() {
		var self = this;
		Promise.all(this.bet.children.map(function (obj) {
			if (obj.name == cc.RedT.setting.angrybird.bet) {
				self.cuoc = obj.name;
				obj.children[0].active = true;
				obj.pauseSystemEvents();
			} else {
				obj.children[0].active = false;
				obj.resumeSystemEvents();
			}
		}));
	},
	changerBet: function changerBet(event, bet) {
		this.cuoc = cc.RedT.setting.angrybird.bet = bet;
		var target = event.target;
		Promise.all(this.bet.children.map(function (obj) {
			if (obj == target) {
				obj.children[0].active = true;
				obj.pauseSystemEvents();
			} else {
				obj.children[0].active = false;
				obj.resumeSystemEvents();
			}
		}));
		this.onGetHu();
	},
	/*intChangerBet: function(){
 	this.cuoc = cc.RedT.setting.angrybird.bet;
 	this.rooms.forEach(function(room, index){
 		if (room === this.cuoc) {
 			this.room = index;
 			this.labelBet.string = helper.numberWithCommas(this.rooms[this.room]);
 		}
 	}.bind(this));
 },
 betPlus: function(){
 	this.room++;
 	let data = this.rooms[this.room];
 	if (void 0 !== data) {
 		this.cuoc = data;
 	}else{
 		this.room = 0;
 		this.cuoc = this.rooms[this.room];
 	}
 	this.labelBet.string = helper.numberWithCommas(this.rooms[this.room]);
 },
 betTru: function(){
 	this.room--;
 	let data = this.rooms[this.room];
 	if (void 0 !== data) {
 		this.cuoc = data;
 	}else{
 		this.room = this.rooms.length-1;
 		this.cuoc = this.rooms[this.room];
 	}
 	this.labelBet.string = helper.numberWithCommas(this.rooms[this.room]);
 },*/
	autoSpin: function autoSpin() {
		this.random();
		var self = this;
		[0, 1, 2, 3, 4].forEach(function (i) {
			if (i < 3) {
				self.reelsL[i].spin(i);
			} else {
				self.reelsR[i - 3].spin(i);
			}
		});
	},
	onSpin: function onSpin() {
		this.buttonSpin.pauseSystemEvents();
	},
	offSpin: function offSpin() {
		this.isSpin = this.buttonStop.active = this.isAuto = false;
		this.buttonAuto.color = cc.color(155, 155, 155);
		this.buttonAuto.active = this.buttonSpin.active = true;
		this.buttonSpin.resumeSystemEvents();
	},
	onClickSpin: function onClickSpin() {
		if (!this.isSpin) {
			this.isSpin = true;
			this.onSpin();
			this.onGetSpin();
		}
	},
	onClickAuto: function onClickAuto() {
		this.isAuto = cc.RedT.setting.angrybird.isAuto = !this.isAuto;
		this.buttonAuto.color = this.isAuto ? cc.Color.WHITE : cc.color(155, 155, 155);
		this.buttonStop.active = this.isSpin ? this.isAuto ? true : false : false;
		this.buttonAuto.active = !this.buttonStop.active;
		this.buttonSpin.active = this.isSpin ? false : true;
	},
	onClickStop: function onClickStop() {
		this.onClickAuto();
		this.buttonStop.active = false;
	},
	onGetInfo: function onGetInfo() {
		cc.RedT.send({ g: { angrybird: { info: { cuoc: this.cuoc } } } });
	},
	onGetSpin: function onGetSpin() {
		cc.RedT.send({ g: { angrybird: { spin: { cuoc: this.cuoc } } } });
	},
	onCloseGame: function onCloseGame() {
		this.isSpin = false;
		this.reelsL.forEach(function (reel) {
			reel.stop();
		});
		this.reelsR.forEach(function (reel) {
			reel.stop();
		});
		this.offSpin();
	},
	addNotice: function addNotice(text) {
		var notice = cc.instantiate(this.RedT.prefabMiniNotice);
		var noticeComponent = notice.getComponent('mini_warning');
		noticeComponent.text.string = text;
		this.notice.addChild(notice);
	},
	onData: function onData(data) {
		var _this = this;

		var self = this;
		if (void 0 !== data.status) {
			if (data.status === 1) {
				this.notice.destroyAllChildren();
				this.win = data.win;
				this.nohu = data.nohu;
				this.isBigWin = data.isBigWin;
				this.buttonStop.active = this.isAuto ? true : false;
				this.buttonAuto.active = this.buttonSpin.active = !this.buttonStop.active;

				data.celR.forEach(function (cel, cel_index) {
					cel.forEach(function (icon, index) {
						self.reelsR[cel_index].icons[index].setIcon(icon, true);
					});
				});

				Promise.all(data.cel.map(function (cel, cel_index) {
					return Promise.all(cel.map(function (icon, index) {
						self.reelsL[cel_index].icons[index].setIcon(icon, true);
					})).then(function (result) {
						return result;
					});
				})).then(function (result) {
					_this.autoSpin();
				});
			} else {
				this.offSpin();
			}
		}

		if (void 0 !== data.line_win) {
			this.line_win = data.line_win;
		}

		if (void 0 !== data.log) {
			this.RedT.Dialog.AngryBird_history.onData(data.log);
		}
		if (void 0 !== data.top) {
			this.RedT.Dialog.AngryBird_top.onData(data.top);
		}
		if (void 0 !== data.notice) {
			this.addNotice(data.notice);
		}
	},
	copy: function copy() {
		this.reelsL.forEach(function (reel) {
			if (void 0 !== reel.icons && void 0 !== reel.icons[19] && void 0 !== reel.icons[19].setIcon) {
				reel.icons[19].setIcon(reel.icons[2].data);
				reel.icons[18].setIcon(reel.icons[1].data);
				reel.icons[17].setIcon(reel.icons[0].data);
			}
			//reel.node.y = 0;
		});

		this.reelsR.forEach(function (reel) {
			if (void 0 !== reel.icons && void 0 !== reel.icons[22] && void 0 !== reel.icons[22].setIcon) {
				reel.icons[22].setIcon(reel.icons[2].data);
				reel.icons[21].setIcon(reel.icons[1].data);
				reel.icons[20].setIcon(reel.icons[0].data);
			}
			//reel.node.y = 0;
		});
	},
	random: function random() {
		this.reelsL.forEach(function (reel) {
			reel.icons.forEach(function (icon, index) {
				if (index > 2 && index < 17) {
					icon.random();
				}
			});
		});
		this.reelsR.forEach(function (reel) {
			reel.icons.forEach(function (icon, index) {
				if (index > 2 && index < 20) {
					icon.random();
				}
			});
		});
	},
	onGetHu: function onGetHu() {
		if (void 0 !== cc.RedT.setting.topHu.data && this.node.active) {
			var result = cc.RedT.setting.topHu.data['arb'].filter(function (temp) {
				return temp.type == this.cuoc;
			}.bind(this));
			var s = helper.getOnlyNumberInString(this.hu.string);
			var bet = result[0].bet;
			if (s - bet != 0) {
				helper.numberTo(this.hu, s, bet, 1500, true);
			}
		}
	},
	hieuUng: function hieuUng() {
		if (this.nohu) {
			this.nohu = false;
			// Nổ Hũ
			if (this.isAuto == true) {
				this.onClickStop();
			}

			var nohu = cc.instantiate(this.RedT.PrefabNoHu);
			nohu = nohu.getComponent(cc.Animation);
			var text = nohu.node.children[6].getComponent(cc.Label);

			var Play = function Play() {
				var huong = cc.callFunc(function () {
					cc.RedT.audio.playEf('winHu');
					helper.numberTo(text, 0, this.win, 1000, true);
				}, this);
				nohu.node.runAction(cc.sequence(cc.delayTime(0.25), huong));
			};

			var Finish = function Finish() {
				nohu.node.destroy();
				this.labelWin.string = helper.numberWithCommas(this.win);
				this.win = 0;
				this.hieuUng();
			};
			this.RedT.nodeEfect.addChild(nohu.node);
			nohu.on('play', Play, this);
			nohu.on('finished', Finish, this);
			nohu.play();
		} else if (!this.nohu && this.isBigWin) {
			// BigWin
			this.isBigWin = false;
			var BigWin = cc.instantiate(this.RedT.prefabBigWin);
			BigWin = BigWin.getComponent(cc.Animation);
			var BigWinFinish = function BigWinFinish() {
				this.labelWin.string = helper.numberWithCommas(BigWin.node.bet);
				BigWin.node.destroy();
				if (this.isAuto) {
					this.onGetSpin();
				} else {
					this.offSpin();
				}
			};
			BigWin.on('finished', BigWinFinish, this);
			BigWin.node.bet = this.win;
			BigWin.node.position = cc.v2(0, 98);
			this.notice.addChild(BigWin.node);
			this.win = 0;
			if (!this.isAuto) {
				this.offSpin();
			}
		} else if (!this.isBigWin && this.win > 0) {
			var node = new cc.Node();
			node.addComponent(cc.Label);
			node = node.getComponent(cc.Label);
			helper.numberTo(node, 0, this.win, 600, true);
			node.win = this.win;
			node.font = this.red ? cc.RedT.util.fontCong : cc.RedT.util.fontTru;
			node.lineHeight = 130;
			node.fontSize = 25;
			node.node.position = cc.v2(0, 98);
			node.node.runAction(cc.sequence(cc.delayTime(1.5), cc.callFunc(function () {
				this.labelWin.string = helper.numberWithCommas(node.win);
				node.node.destroy();
				this.hieuUng();
				this.offLineWin();
			}, this)));
			this.win = 0;
			this.notice.addChild(node.node);
			this.onLineWin();
		} else {
			if (this.isAuto) {
				this.timeOut = setTimeout(function () {
					this.onGetSpin();
				}.bind(this), 300);
			} else {
				this.offSpin();
			}
		}
	},
	onLineWin: function onLineWin() {
		var self = this;
		this.line_win.forEach(function (obj) {
			self.line.children[obj.line - 1].active = true;
		});
	},
	offLineWin: function offLineWin() {
		this.line.children.forEach(function (obj) {
			obj.active = false;
		});
	}
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uXFwuLlxcLi5cXC4uXFwuLlxcLi5cXGFzc2V0c1xcU2NyaXB0XFxHYW1lXFxBbmdyeUJpcmRzLy4uXFwuLlxcLi5cXC4uXFwuLlxcLi5cXGFzc2V0c1xcU2NyaXB0XFxHYW1lXFxBbmdyeUJpcmRzL2Fzc2V0c1xcU2NyaXB0XFxHYW1lXFxBbmdyeUJpcmRzXFxBbmdyeUJpcmRzLmpzIl0sIm5hbWVzIjpbImhlbHBlciIsInJlcXVpcmUiLCJyZWVsTCIsInJlZWxSIiwiY2MiLCJDbGFzcyIsImV4dGVuZHMiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwiYmFja2dyb3VuZCIsIk5vZGUiLCJsaW5lIiwicmVlbHNMIiwiZGVmYXVsdCIsInR5cGUiLCJyZWVsc1IiLCJpY29ucyIsIlNwcml0ZUZyYW1lIiwiaWNvbnNYIiwiaWNvbkxQcmVmYWIiLCJQcmVmYWIiLCJpY29uUlByZWZhYiIsImJ1dHRvblNwaW4iLCJidXR0b25BdXRvIiwiYnV0dG9uU3RvcCIsImxhYmVsV2luIiwiTGFiZWwiLCJiZXQiLCJub3RpY2UiLCJodSIsImN1b2MiLCJpc0F1dG8iLCJpc1NwaW4iLCJyZWQiLCJpbml0Iiwib2JqIiwiUmVkVCIsInNldHRpbmciLCJhbmdyeWJpcmQiLCJzY2FsZSIsImNoZWNrIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIm5vZGUiLCJhY3RpdmUiLCJwb3NpdGlvbiIsImludENoYW5nZXJCZXQiLCJvbkNsaWNrQXV0byIsIm9uTG9hZCIsInNlbGYiLCJ0dE9mZnNldCIsImZvckVhY2giLCJyZWVsIiwib25FbmFibGUiLCJvbkdldEh1Iiwib24iLCJFdmVudFR5cGUiLCJUT1VDSF9TVEFSVCIsImV2ZW50U3RhcnQiLCJUT1VDSF9NT1ZFIiwiZXZlbnRNb3ZlIiwiVE9VQ0hfRU5EIiwiZXZlbnRFbmQiLCJUT1VDSF9DQU5DRUwiLCJvbkRpc2FibGUiLCJvZmYiLCJvbkNsb3NlR2FtZSIsImUiLCJzZXRUb3AiLCJ2MiIsInRvdWNoIiwiZ2V0TG9jYXRpb25YIiwieCIsImdldExvY2F0aW9uWSIsInkiLCJwYXJlbnQiLCJpbnNlcnRDaGlsZCIsIm9wZW5HYW1lIiwiYXVkaW8iLCJwbGF5Q2xpY2siLCJJU19MT0dJTiIsInNldEl0ZW0iLCJpbkdhbWUiLCJkaWFsb2ciLCJzaG93U2lnbkluIiwiY2xvc2VHYW1lIiwiUHJvbWlzZSIsImFsbCIsImNoaWxkcmVuIiwibWFwIiwibmFtZSIsInBhdXNlU3lzdGVtRXZlbnRzIiwicmVzdW1lU3lzdGVtRXZlbnRzIiwiY2hhbmdlckJldCIsImV2ZW50IiwidGFyZ2V0IiwiYXV0b1NwaW4iLCJyYW5kb20iLCJpIiwic3BpbiIsIm9uU3BpbiIsIm9mZlNwaW4iLCJjb2xvciIsIm9uQ2xpY2tTcGluIiwib25HZXRTcGluIiwiQ29sb3IiLCJXSElURSIsIm9uQ2xpY2tTdG9wIiwib25HZXRJbmZvIiwic2VuZCIsImciLCJpbmZvIiwic3RvcCIsImFkZE5vdGljZSIsInRleHQiLCJpbnN0YW50aWF0ZSIsInByZWZhYk1pbmlOb3RpY2UiLCJub3RpY2VDb21wb25lbnQiLCJnZXRDb21wb25lbnQiLCJzdHJpbmciLCJhZGRDaGlsZCIsIm9uRGF0YSIsImRhdGEiLCJzdGF0dXMiLCJkZXN0cm95QWxsQ2hpbGRyZW4iLCJ3aW4iLCJub2h1IiwiaXNCaWdXaW4iLCJjZWxSIiwiY2VsIiwiY2VsX2luZGV4IiwiaWNvbiIsImluZGV4Iiwic2V0SWNvbiIsInRoZW4iLCJyZXN1bHQiLCJsaW5lX3dpbiIsImxvZyIsIkRpYWxvZyIsIkFuZ3J5QmlyZF9oaXN0b3J5IiwidG9wIiwiQW5ncnlCaXJkX3RvcCIsImNvcHkiLCJ0b3BIdSIsImZpbHRlciIsInRlbXAiLCJiaW5kIiwicyIsImdldE9ubHlOdW1iZXJJblN0cmluZyIsIm51bWJlclRvIiwiaGlldVVuZyIsIlByZWZhYk5vSHUiLCJBbmltYXRpb24iLCJQbGF5IiwiaHVvbmciLCJjYWxsRnVuYyIsInBsYXlFZiIsInJ1bkFjdGlvbiIsInNlcXVlbmNlIiwiZGVsYXlUaW1lIiwiRmluaXNoIiwiZGVzdHJveSIsIm51bWJlcldpdGhDb21tYXMiLCJub2RlRWZlY3QiLCJwbGF5IiwiQmlnV2luIiwicHJlZmFiQmlnV2luIiwiQmlnV2luRmluaXNoIiwiYWRkQ29tcG9uZW50IiwiZm9udCIsInV0aWwiLCJmb250Q29uZyIsImZvbnRUcnUiLCJsaW5lSGVpZ2h0IiwiZm9udFNpemUiLCJvZmZMaW5lV2luIiwib25MaW5lV2luIiwidGltZU91dCIsInNldFRpbWVvdXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsSUFBSUEsU0FBU0MsUUFBUSxRQUFSLENBQWI7O0FBRUEsSUFBSUMsUUFBUUQsUUFBUSxtQkFBUixDQUFaO0FBQ0EsSUFBSUUsUUFBUUYsUUFBUSxtQkFBUixDQUFaOztBQUVBRyxHQUFHQyxLQUFILENBQVM7QUFDUkMsVUFBU0YsR0FBR0csU0FESjs7QUFHUkMsYUFBWTtBQUNYQyxjQUFZTCxHQUFHTSxJQURKO0FBRVhDLFFBQU1QLEdBQUdNLElBRkU7QUFHWEUsVUFBUTtBQUNQQyxZQUFTLEVBREY7QUFFUEMsU0FBTVo7QUFGQyxHQUhHO0FBT1hhLFVBQVE7QUFDUEYsWUFBUyxFQURGO0FBRVBDLFNBQU1YO0FBRkMsR0FQRztBQVdYYSxTQUFPO0FBQ05ILFlBQVMsRUFESDtBQUVOQyxTQUFNVixHQUFHYTtBQUZILEdBWEk7QUFlWEMsVUFBUTtBQUNQTCxZQUFTLEVBREY7QUFFUEMsU0FBTVYsR0FBR2E7QUFGRixHQWZHOztBQW9CWEUsZUFBYWYsR0FBR2dCLE1BcEJMO0FBcUJYQyxlQUFhakIsR0FBR2dCLE1BckJMOztBQXVCWEUsY0FBYWxCLEdBQUdNLElBdkJMO0FBd0JYYSxjQUFhbkIsR0FBR00sSUF4Qkw7QUF5QlhjLGNBQWFwQixHQUFHTSxJQXpCTDs7QUEyQlhlLFlBQWFyQixHQUFHc0IsS0EzQkw7QUE0Qlg7QUFDQUMsT0FBS3ZCLEdBQUdNLElBN0JHO0FBOEJYa0IsVUFBU3hCLEdBQUdNLElBOUJEO0FBK0JYbUIsTUFBU3pCLEdBQUdzQixL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cmlwdFxcR2FtZVxcQW5ncnlCaXJkcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG52YXIgaGVscGVyID0gcmVxdWlyZSgnSGVscGVyJyk7XHJcblxyXG52YXIgcmVlbEwgPSByZXF1aXJlKCdBbmdyeUJpcmRzX3JlZWxzTCcpO1xyXG52YXIgcmVlbFIgPSByZXF1aXJlKCdBbmdyeUJpcmRzX3JlZWxzUicpO1xyXG5cclxuY2MuQ2xhc3Moe1xyXG5cdGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcclxuXHJcblx0cHJvcGVydGllczoge1xyXG5cdFx0YmFja2dyb3VuZDogY2MuTm9kZSxcclxuXHRcdGxpbmU6IGNjLk5vZGUsXHJcblx0XHRyZWVsc0w6IHtcclxuXHRcdFx0ZGVmYXVsdDogW10sXHJcblx0XHRcdHR5cGU6IHJlZWxMLFxyXG5cdFx0fSxcclxuXHRcdHJlZWxzUjoge1xyXG5cdFx0XHRkZWZhdWx0OiBbXSxcclxuXHRcdFx0dHlwZTogcmVlbFIsXHJcblx0XHR9LFxyXG5cdFx0aWNvbnM6IHtcclxuXHRcdFx0ZGVmYXVsdDogW10sXHJcblx0XHRcdHR5cGU6IGNjLlNwcml0ZUZyYW1lLFxyXG5cdFx0fSxcclxuXHRcdGljb25zWDoge1xyXG5cdFx0XHRkZWZhdWx0OiBbXSxcclxuXHRcdFx0dHlwZTogY2MuU3ByaXRlRnJhbWUsXHJcblx0XHR9LFxyXG5cclxuXHRcdGljb25MUHJlZmFiOiBjYy5QcmVmYWIsXHJcblx0XHRpY29uUlByZWZhYjogY2MuUHJlZmFiLFxyXG5cclxuXHRcdGJ1dHRvblNwaW46ICBjYy5Ob2RlLFxyXG5cdFx0YnV0dG9uQXV0bzogIGNjLk5vZGUsXHJcblx0XHRidXR0b25TdG9wOiAgY2MuTm9kZSxcclxuXHJcblx0XHRsYWJlbFdpbjogICAgY2MuTGFiZWwsXHJcblx0XHQvL2xhYmVsQmV0OiAgICBjYy5MYWJlbCxcclxuXHRcdGJldDogY2MuTm9kZSxcclxuXHRcdG5vdGljZTogIGNjLk5vZGUsXHJcblx0XHRodTogICAgICBjYy5MYWJlbCxcclxuXHRcdGN1b2M6ICAgICBcIlwiLFxyXG5cdFx0aXNBdXRvOiAgZmFsc2UsXHJcblx0XHRpc1NwaW46ICBmYWxzZSxcclxuXHRcdHJlZDogICAgIHRydWUsXHJcblx0XHQvKnJvb206ICAgIDAsXHJcblx0XHRyb29tczoge1xyXG5cdFx0XHRkZWZhdWx0OiBbXSxcclxuXHRcdFx0dHlwZTogY2MuU3RyaW5nLFxyXG5cdFx0fSwqL1xyXG5cdH0sXHJcblx0aW5pdChvYmope1xyXG5cdFx0dGhpcy5SZWRUID0gb2JqO1xyXG5cdFx0Y2MuUmVkVC5zZXR0aW5nLmFuZ3J5YmlyZCA9IGNjLlJlZFQuc2V0dGluZy5hbmdyeWJpcmQgfHwge3NjYWxlOjF9O1xyXG5cclxuXHRcdHZhciBjaGVjayA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhbmdyeWJpcmQnKTtcclxuXHRcdGlmIChjaGVjayA9PSBcInRydWVcIikge1xyXG5cdFx0XHR0aGlzLm5vZGUuYWN0aXZlID0gdHJ1ZTtcclxuXHRcdH1cclxuXHRcdGlmICh2b2lkIDAgIT09IGNjLlJlZFQuc2V0dGluZy5hbmdyeWJpcmQucG9zaXRpb24pIHtcclxuXHRcdFx0dGhpcy5ub2RlLnBvc2l0aW9uID0gY2MuUmVkVC5zZXR0aW5nLmFuZ3J5YmlyZC5wb3NpdGlvbjtcclxuXHRcdH1cclxuXHRcdGlmICh2b2lkIDAgIT09IGNjLlJlZFQuc2V0dGluZy5hbmdyeWJpcmQuYmV0ICYmIGNjLlJlZFQuc2V0dGluZy5hbmdyeWJpcmQuYmV0ICE9IHRoaXMuY3VvYykge1xyXG5cdFx0XHR0aGlzLmludENoYW5nZXJCZXQoKTtcclxuXHRcdH1cclxuXHRcdGlmICh2b2lkIDAgIT09IGNjLlJlZFQuc2V0dGluZy5hbmdyeWJpcmQuaXNBdXRvICYmIHRoaXMuaXNBdXRvICE9IGNjLlJlZFQuc2V0dGluZy5hbmdyeWJpcmQuaXNBdXRvKSB7XHJcblx0XHRcdHRoaXMub25DbGlja0F1dG8oKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cdG9uTG9hZCAoKSB7XHJcblx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHR0aGlzLnR0T2Zmc2V0ID0gbnVsbDtcclxuXHJcblx0XHR0aGlzLnJlZWxzTC5mb3JFYWNoKGZ1bmN0aW9uKHJlZWwpIHtcclxuXHRcdFx0cmVlbC5pbml0KHNlbGYpO1xyXG5cdFx0fSk7XHJcblx0XHR0aGlzLnJlZWxzUi5mb3JFYWNoKGZ1bmN0aW9uKHJlZWxSKSB7XHJcblx0XHRcdHJlZWxSLmluaXQoc2VsZik7XHJcblx0XHR9KTtcclxuXHR9LFxyXG5cdG9uRW5hYmxlOiBmdW5jdGlvbigpIHtcclxuXHRcdHRoaXMub25HZXRIdSgpO1xyXG5cdFx0dGhpcy5iYWNrZ3JvdW5kLm9uKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX1NUQVJULCAgdGhpcy5ldmVudFN0YXJ0LCB0aGlzKTtcclxuXHRcdHRoaXMuYmFja2dyb3VuZC5vbihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9NT1ZFLCAgIHRoaXMuZXZlbnRNb3ZlLCAgdGhpcyk7XHJcblx0XHR0aGlzLmJhY2tncm91bmQub24oY2MuTm9kZS5FdmVudFR5cGUuVE9VQ0hfRU5ELCAgICB0aGlzLmV2ZW50RW5kLCAgIHRoaXMpO1xyXG5cdFx0dGhpcy5iYWNrZ3JvdW5kLm9uKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX0NBTkNFTCwgdGhpcy5ldmVudEVuZCwgICB0aGlzKTtcclxuXHRcdC8vIHRoaXMuYmFja2dyb3VuZC5vbihjYy5Ob2RlLkV2ZW50VHlwZS5NT1VTRV9FTlRFUiwgIHRoaXMuc2V0VG9wLCAgICAgdGhpcyk7XHJcblx0fSxcclxuXHRvbkRpc2FibGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dGhpcy5iYWNrZ3JvdW5kLm9mZihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9TVEFSVCwgIHRoaXMuZXZlbnRTdGFydCwgdGhpcyk7XHJcblx0XHR0aGlzLmJhY2tncm91bmQub2ZmKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX01PVkUsICAgdGhpcy5ldmVudE1vdmUsICB0aGlzKTtcclxuXHRcdHRoaXMuYmFja2dyb3VuZC5vZmYoY2MuTm9kZS5FdmVudFR5cGUuVE9VQ0hfRU5ELCAgICB0aGlzLmV2ZW50RW5kLCAgIHRoaXMpO1xyXG5cdFx0dGhpcy5iYWNrZ3JvdW5kLm9mZihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9DQU5DRUwsIHRoaXMuZXZlbnRFbmQsICAgdGhpcyk7XHJcblx0XHQvLyB0aGlzLmJhY2tncm91bmQub2ZmKGNjLk5vZGUuRXZlbnRUeXBlLk1PVVNFX0VOVEVSLCAgdGhpcy5zZXRUb3AsICAgICB0aGlzKTtcclxuXHRcdHRoaXMub25DbG9zZUdhbWUoKTtcclxuXHR9LFxyXG5cdGV2ZW50U3RhcnQ6IGZ1bmN0aW9uKGUpe1xyXG5cdFx0dGhpcy5zZXRUb3AoKTtcclxuXHRcdHRoaXMudHRPZmZzZXQgID0gY2MudjIoZS50b3VjaC5nZXRMb2NhdGlvblgoKSAtIHRoaXMubm9kZS5wb3NpdGlvbi54LCBlLnRvdWNoLmdldExvY2F0aW9uWSgpIC0gdGhpcy5ub2RlLnBvc2l0aW9uLnkpXHJcblx0fSxcclxuXHRldmVudE1vdmU6IGZ1bmN0aW9uKGUpe1xyXG5cdFx0dGhpcy5ub2RlLnBvc2l0aW9uID0gY2MudjIoZS50b3VjaC5nZXRMb2NhdGlvblgoKSAtIHRoaXMudHRPZmZzZXQueCwgZS50b3VjaC5nZXRMb2NhdGlvblkoKSAtIHRoaXMudHRPZmZzZXQueSlcclxuXHR9LFxyXG5cdGV2ZW50RW5kOiBmdW5jdGlvbigpe1xyXG5cdFx0Y2MuUmVkVC5zZXR0aW5nLmFuZ3J5YmlyZC5wb3NpdGlvbiA9IHRoaXMubm9kZS5wb3NpdGlvbjtcclxuXHR9LFxyXG5cdHNldFRvcDpmdW5jdGlvbigpe1xyXG5cdFx0Y2MuUmVkVC5zZXR0aW5nLmFuZ3J5YmlyZC5zY2FsZSA9IDE7XHJcblx0XHR0aGlzLm5vZGUucGFyZW50Lmluc2VydENoaWxkKHRoaXMubm9kZSk7XHJcblx0XHR0aGlzLlJlZFQuc2V0VG9wKHRoaXMubm9kZSk7XHJcblx0fSxcclxuXHRvcGVuR2FtZTogZnVuY3Rpb24gKCkge1xyXG5cdFx0Y2MuUmVkVC5hdWRpby5wbGF5Q2xpY2soKTtcclxuXHRcdGlmIChjYy5SZWRULklTX0xPR0lOKXtcclxuXHRcdFx0dGhpcy5ub2RlLmFjdGl2ZSA9ICEwO1xyXG5cdFx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYW5ncnliaXJkJywgdHJ1ZSk7XHJcblx0XHRcdHRoaXMuc2V0VG9wKCk7XHJcblx0XHR9XHJcblx0XHRlbHNlXHJcblx0XHRcdGNjLlJlZFQuaW5HYW1lLmRpYWxvZy5zaG93U2lnbkluKCk7XHJcblx0fSxcclxuXHRjbG9zZUdhbWU6ZnVuY3Rpb24oKXtcclxuXHRcdHRoaXMubm9kZS5hY3RpdmUgPSAhMTtcclxuXHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdhbmdyeWJpcmQnLCBmYWxzZSk7XHJcblx0fSxcclxuXHRpbnRDaGFuZ2VyQmV0OiBmdW5jdGlvbigpe1xyXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0UHJvbWlzZS5hbGwodGhpcy5iZXQuY2hpbGRyZW4ubWFwKGZ1bmN0aW9uKG9iail7XHJcblx0XHRcdGlmIChvYmoubmFtZSA9PSBjYy5SZWRULnNldHRpbmcuYW5ncnliaXJkLmJldCkge1xyXG5cdFx0XHRcdHNlbGYuY3VvYyA9IG9iai5uYW1lO1xyXG5cdFx0XHRcdG9iai5jaGlsZHJlblswXS5hY3RpdmUgPSB0cnVlO1xyXG5cdFx0XHRcdG9iai5wYXVzZVN5c3RlbUV2ZW50cygpO1xyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRvYmouY2hpbGRyZW5bMF0uYWN0aXZlID0gZmFsc2U7XHJcblx0XHRcdFx0b2JqLnJlc3VtZVN5c3RlbUV2ZW50cygpO1xyXG5cdFx0XHR9XHJcblx0XHR9KSlcclxuXHR9LFxyXG5cdGNoYW5nZXJCZXQ6IGZ1bmN0aW9uKGV2ZW50LCBiZXQpe1xyXG5cdFx0dGhpcy5jdW9jID0gY2MuUmVkVC5zZXR0aW5nLmFuZ3J5YmlyZC5iZXQgPSBiZXQ7XHJcblx0XHR2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xyXG5cdFx0UHJvbWlzZS5hbGwodGhpcy5iZXQuY2hpbGRyZW4ubWFwKGZ1bmN0aW9uKG9iail7XHJcblx0XHRcdGlmIChvYmogPT0gdGFyZ2V0KSB7XHJcblx0XHRcdFx0b2JqLmNoaWxkcmVuWzBdLmFjdGl2ZSA9IHRydWU7XHJcblx0XHRcdFx0b2JqLnBhdXNlU3lzdGVtRXZlbnRzKCk7XHJcblx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdG9iai5jaGlsZHJlblswXS5hY3RpdmUgPSBmYWxzZTtcclxuXHRcdFx0XHRvYmoucmVzdW1lU3lzdGVtRXZlbnRzKCk7XHJcblx0XHRcdH1cclxuXHRcdH0pKVxyXG5cdFx0dGhpcy5vbkdldEh1KCk7XHJcblx0fSxcclxuXHQvKmludENoYW5nZXJCZXQ6IGZ1bmN0aW9uKCl7XHJcblx0XHR0aGlzLmN1b2MgPSBjYy5SZWRULnNldHRpbmcuYW5ncnliaXJkLmJldDtcclxuXHRcdHRoaXMucm9vbXMuZm9yRWFjaChmdW5jdGlvbihyb29tLCBpbmRleCl7XHJcblx0XHRcdGlmIChyb29tID09PSB0aGlzLmN1b2MpIHtcclxuXHRcdFx0XHR0aGlzLnJvb20gPSBpbmRleDtcclxuXHRcdFx0XHR0aGlzLmxhYmVsQmV0LnN0cmluZyA9IGhlbHBlci5udW1iZXJXaXRoQ29tbWFzKHRoaXMucm9vbXNbdGhpcy5yb29tXSk7XHJcblx0XHRcdH1cclxuXHRcdH0uYmluZCh0aGlzKSk7XHJcblx0fSxcclxuXHRiZXRQbHVzOiBmdW5jdGlvbigpe1xyXG5cdFx0dGhpcy5yb29tKys7XHJcblx0XHRsZXQgZGF0YSA9IHRoaXMucm9vbXNbdGhpcy5yb29tXTtcclxuXHRcdGlmICh2b2lkIDAgIT09IGRhdGEpIHtcclxuXHRcdFx0dGhpcy5jdW9jID0gZGF0YTtcclxuXHRcdH1lbHNle1xyXG5cdFx0XHR0aGlzLnJvb20gPSAwO1xyXG5cdFx0XHR0aGlzLmN1b2MgPSB0aGlzLnJvb21zW3RoaXMucm9vbV07XHJcblx0XHR9XHJcblx0XHR0aGlzLmxhYmVsQmV0LnN0cmluZyA9IGhlbHBlci5udW1iZXJXaXRoQ29tbWFzKHRoaXMucm9vbXNbdGhpcy5yb29tXSk7XHJcblx0fSxcclxuXHRiZXRUcnU6IGZ1bmN0aW9uKCl7XHJcblx0XHR0aGlzLnJvb20tLTtcclxuXHRcdGxldCBkYXRhID0gdGhpcy5yb29tc1t0aGlzLnJvb21dO1xyXG5cdFx0aWYgKHZvaWQgMCAhPT0gZGF0YSkge1xyXG5cdFx0XHR0aGlzLmN1b2MgPSBkYXRhO1xyXG5cdFx0fWVsc2V7XHJcblx0XHRcdHRoaXMucm9vbSA9IHRoaXMucm9vbXMubGVuZ3RoLTE7XHJcblx0XHRcdHRoaXMuY3VvYyA9IHRoaXMucm9vbXNbdGhpcy5yb29tXTtcclxuXHRcdH1cclxuXHRcdHRoaXMubGFiZWxCZXQuc3RyaW5nID0gaGVscGVyLm51bWJlcldpdGhDb21tYXModGhpcy5yb29tc1t0aGlzLnJvb21dKTtcclxuXHR9LCovXHJcblx0YXV0b1NwaW46IGZ1bmN0aW9uKCl7XHJcblx0XHR0aGlzLnJhbmRvbSgpO1xyXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0WzAsMSwyLDMsNF0uZm9yRWFjaChmdW5jdGlvbihpKSB7XHJcblx0XHRcdGlmIChpIDwgMykge1xyXG5cdFx0XHRcdHNlbGYucmVlbHNMW2ldLnNwaW4oaSk7XHJcblx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdHNlbGYucmVlbHNSW2ktM10uc3BpbihpKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fSxcclxuXHRvblNwaW46IGZ1bmN0aW9uKCl7XHJcblx0XHR0aGlzLmJ1dHRvblNwaW4ucGF1c2VTeXN0ZW1FdmVudHMoKTtcclxuXHR9LFxyXG5cdG9mZlNwaW46IGZ1bmN0aW9uKCl7XHJcblx0XHR0aGlzLmlzU3BpbiA9IHRoaXMuYnV0dG9uU3RvcC5hY3RpdmUgPSB0aGlzLmlzQXV0byA9IGZhbHNlO1xyXG5cdFx0dGhpcy5idXR0b25BdXRvLmNvbG9yICA9IGNjLmNvbG9yKDE1NSwxNTUsMTU1KTtcclxuXHRcdHRoaXMuYnV0dG9uQXV0by5hY3RpdmUgPSB0aGlzLmJ1dHRvblNwaW4uYWN0aXZlID0gdHJ1ZTtcclxuXHRcdHRoaXMuYnV0dG9uU3Bpbi5yZXN1bWVTeXN0ZW1FdmVudHMoKTtcclxuXHR9LFxyXG5cdG9uQ2xpY2tTcGluOiBmdW5jdGlvbigpe1xyXG5cdFx0aWYgKCF0aGlzLmlzU3Bpbikge1xyXG5cdFx0XHR0aGlzLmlzU3BpbiA9IHRydWU7XHJcblx0XHRcdHRoaXMub25TcGluKCk7XHJcblx0XHRcdHRoaXMub25HZXRTcGluKCk7XHJcblx0XHR9XHJcblx0fSxcclxuXHRvbkNsaWNrQXV0bzogZnVuY3Rpb24oKXtcclxuXHRcdHRoaXMuaXNBdXRvICAgICAgICAgICAgPSBjYy5SZWRULnNldHRpbmcuYW5ncnliaXJkLmlzQXV0byA9ICF0aGlzLmlzQXV0bztcclxuXHRcdHRoaXMuYnV0dG9uQXV0by5jb2xvciAgPSB0aGlzLmlzQXV0byA/IGNjLkNvbG9yLldISVRFIDogY2MuY29sb3IoMTU1LDE1NSwxNTUpO1xyXG5cdFx0dGhpcy5idXR0b25TdG9wLmFjdGl2ZSA9IHRoaXMuaXNTcGluID8gKHRoaXMuaXNBdXRvID8gdHJ1ZSA6IGZhbHNlKSA6IGZhbHNlO1xyXG5cdFx0dGhpcy5idXR0b25BdXRvLmFjdGl2ZSA9ICF0aGlzLmJ1dHRvblN0b3AuYWN0aXZlO1xyXG5cdFx0dGhpcy5idXR0b25TcGluLmFjdGl2ZSA9IHRoaXMuaXNTcGluID8gZmFsc2UgOiB0cnVlO1xyXG5cdH0sXHJcblx0b25DbGlja1N0b3A6IGZ1bmN0aW9uKCl7XHJcblx0XHR0aGlzLm9uQ2xpY2tBdXRvKCk7XHJcblx0XHR0aGlzLmJ1dHRvblN0b3AuYWN0aXZlID0gZmFsc2U7XHJcblx0fSxcclxuXHRvbkdldEluZm86IGZ1bmN0aW9uKCl7XHJcblx0XHRjYy5SZWRULnNlbmQoe2c6e2FuZ3J5YmlyZDp7aW5mbzp7Y3VvYzp0aGlzLmN1b2N9fX19KTtcclxuXHR9LFxyXG5cdG9uR2V0U3BpbjogZnVuY3Rpb24oKXtcclxuXHRcdGNjLlJlZFQuc2VuZCh7Zzp7YW5ncnliaXJkOntzcGluOntjdW9jOnRoaXMuY3VvY319fX0pO1xyXG5cdH0sXHJcblx0b25DbG9zZUdhbWU6IGZ1bmN0aW9uKCl7XHJcblx0XHR0aGlzLmlzU3BpbiA9IGZhbHNlO1xyXG5cdFx0dGhpcy5yZWVsc0wuZm9yRWFjaChmdW5jdGlvbihyZWVsKSB7XHJcblx0XHRcdHJlZWwuc3RvcCgpO1xyXG5cdFx0fSk7XHJcblx0XHR0aGlzLnJlZWxzUi5mb3JFYWNoKGZ1bmN0aW9uKHJlZWwpIHtcclxuXHRcdFx0cmVlbC5zdG9wKCk7XHJcblx0XHR9KTtcclxuXHRcdHRoaXMub2ZmU3BpbigpO1xyXG5cdH0sXHJcblx0YWRkTm90aWNlOmZ1bmN0aW9uKHRleHQpe1xyXG5cdFx0dmFyIG5vdGljZSA9IGNjLmluc3RhbnRpYXRlKHRoaXMuUmVkVC5wcmVmYWJNaW5pTm90aWNlKVxyXG5cdFx0dmFyIG5vdGljZUNvbXBvbmVudCA9IG5vdGljZS5nZXRDb21wb25lbnQoJ21pbmlfd2FybmluZycpXHJcblx0XHRub3RpY2VDb21wb25lbnQudGV4dC5zdHJpbmcgPSB0ZXh0O1xyXG5cdFx0dGhpcy5ub3RpY2UuYWRkQ2hpbGQobm90aWNlKTtcclxuXHR9LFxyXG5cdG9uRGF0YTpmdW5jdGlvbihkYXRhKXtcclxuXHRcdHZhciBzZWxmID0gdGhpcztcclxuXHRcdGlmICh2b2lkIDAgIT09IGRhdGEuc3RhdHVzKSB7XHJcblx0XHRcdGlmIChkYXRhLnN0YXR1cyA9PT0gMSkge1xyXG5cdFx0XHRcdHRoaXMubm90aWNlLmRlc3Ryb3lBbGxDaGlsZHJlbigpO1xyXG5cdFx0XHRcdHRoaXMud2luICAgICAgPSBkYXRhLndpbjtcclxuXHRcdFx0XHR0aGlzLm5vaHUgICAgID0gZGF0YS5ub2h1O1xyXG5cdFx0XHRcdHRoaXMuaXNCaWdXaW4gPSBkYXRhLmlzQmlnV2luO1xyXG5cdFx0XHRcdHRoaXMuYnV0dG9uU3RvcC5hY3RpdmUgPSB0aGlzLmlzQXV0byA/IHRydWUgOiBmYWxzZTtcclxuXHRcdFx0XHR0aGlzLmJ1dHRvbkF1dG8uYWN0aXZlID0gdGhpcy5idXR0b25TcGluLmFjdGl2ZSA9ICF0aGlzLmJ1dHRvblN0b3AuYWN0aXZlO1xyXG5cclxuXHRcdFx0XHRkYXRhLmNlbFIuZm9yRWFjaChmdW5jdGlvbihjZWwsIGNlbF9pbmRleCl7XHJcblx0XHRcdFx0XHRjZWwuZm9yRWFjaChmdW5jdGlvbihpY29uLCBpbmRleCl7XHJcblx0XHRcdFx0XHRcdHNlbGYucmVlbHNSW2NlbF9pbmRleF0uaWNvbnNbaW5kZXhdLnNldEljb24oaWNvbiwgdHJ1ZSk7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0UHJvbWlzZS5hbGwoZGF0YS5jZWwubWFwKGZ1bmN0aW9uKGNlbCwgY2VsX2luZGV4KXtcclxuXHRcdFx0XHRcdHJldHVybiBQcm9taXNlLmFsbChjZWwubWFwKGZ1bmN0aW9uKGljb24sIGluZGV4KXtcclxuXHRcdFx0XHRcdFx0c2VsZi5yZWVsc0xbY2VsX2luZGV4XS5pY29uc1tpbmRleF0uc2V0SWNvbihpY29uLCB0cnVlKTtcclxuXHRcdFx0XHRcdH0pKVxyXG5cdFx0XHRcdFx0LnRoZW4ocmVzdWx0ID0+IHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0fSkpXHJcblx0XHRcdFx0LnRoZW4ocmVzdWx0ID0+IHtcclxuXHRcdFx0XHRcdHRoaXMuYXV0b1NwaW4oKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0dGhpcy5vZmZTcGluKCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZiAodm9pZCAwICE9PSBkYXRhLmxpbmVfd2luKSB7XHJcblx0XHRcdHRoaXMubGluZV93aW4gPSBkYXRhLmxpbmVfd2luO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh2b2lkIDAgIT09IGRhdGEubG9nKSB7XHJcblx0XHRcdHRoaXMuUmVkVC5EaWFsb2cuQW5ncnlCaXJkX2hpc3Rvcnkub25EYXRhKGRhdGEubG9nKTtcclxuXHRcdH1cclxuXHRcdGlmICh2b2lkIDAgIT09IGRhdGEudG9wKSB7XHJcblx0XHRcdHRoaXMuUmVkVC5EaWFsb2cuQW5ncnlCaXJkX3RvcC5vbkRhdGEoZGF0YS50b3ApO1xyXG5cdFx0fVxyXG5cdFx0aWYgKHZvaWQgMCAhPT0gZGF0YS5ub3RpY2UpIHtcclxuXHRcdFx0dGhpcy5hZGROb3RpY2UoZGF0YS5ub3RpY2UpO1xyXG5cdFx0fVxyXG5cdH0sXHJcblx0Y29weTogZnVuY3Rpb24oKXtcclxuXHRcdHRoaXMucmVlbHNMLmZvckVhY2goZnVuY3Rpb24ocmVlbCl7XHJcblx0XHRcdGlmICh2b2lkIDAgIT09IHJlZWwuaWNvbnMgJiZcclxuXHRcdFx0XHR2b2lkIDAgIT09IHJlZWwuaWNvbnNbMTldICYmXHJcblx0XHRcdFx0dm9pZCAwICE9PSByZWVsLmljb25zWzE5XS5zZXRJY29uKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cmVlbC5pY29uc1sxOV0uc2V0SWNvbihyZWVsLmljb25zWzJdLmRhdGEpO1xyXG5cdFx0XHRcdHJlZWwuaWNvbnNbMThdLnNldEljb24ocmVlbC5pY29uc1sxXS5kYXRhKTtcclxuXHRcdFx0XHRyZWVsLmljb25zWzE3XS5zZXRJY29uKHJlZWwuaWNvbnNbMF0uZGF0YSk7XHJcblx0XHRcdH1cclxuXHRcdFx0Ly9yZWVsLm5vZGUueSA9IDA7XHJcblx0XHR9KTtcclxuXHJcblx0XHR0aGlzLnJlZWxzUi5mb3JFYWNoKGZ1bmN0aW9uKHJlZWwpe1xyXG5cdFx0XHRpZiAodm9pZCAwICE9PSByZWVsLmljb25zICYmXHJcblx0XHRcdFx0dm9pZCAwICE9PSByZWVsLmljb25zWzIyXSAmJlxyXG5cdFx0XHRcdHZvaWQgMCAhPT0gcmVlbC5pY29uc1syMl0uc2V0SWNvbilcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHJlZWwuaWNvbnNbMjJdLnNldEljb24ocmVlbC5pY29uc1syXS5kYXRhKTtcclxuXHRcdFx0XHRyZWVsLmljb25zWzIxXS5zZXRJY29uKHJlZWwuaWNvbnNbMV0uZGF0YSk7XHJcblx0XHRcdFx0cmVlbC5pY29uc1syMF0uc2V0SWNvbihyZWVsLmljb25zWzBdLmRhdGEpO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vcmVlbC5ub2RlLnkgPSAwO1xyXG5cdFx0fSk7XHJcblx0fSxcclxuXHRyYW5kb206IGZ1bmN0aW9uKCl7XHJcblx0XHR0aGlzLnJlZWxzTC5mb3JFYWNoKGZ1bmN0aW9uKHJlZWwpe1xyXG5cdFx0XHRyZWVsLmljb25zLmZvckVhY2goZnVuY3Rpb24oaWNvbiwgaW5kZXgpe1xyXG5cdFx0XHRcdGlmIChpbmRleCA+IDIgJiYgaW5kZXggPCAxNykge1xyXG5cdFx0XHRcdFx0aWNvbi5yYW5kb20oKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fSk7XHJcblx0XHR0aGlzLnJlZWxzUi5mb3JFYWNoKGZ1bmN0aW9uKHJlZWwpe1xyXG5cdFx0XHRyZWVsLmljb25zLmZvckVhY2goZnVuY3Rpb24oaWNvbiwgaW5kZXgpe1xyXG5cdFx0XHRcdGlmIChpbmRleCA+IDIgJiYgaW5kZXggPCAyMCkge1xyXG5cdFx0XHRcdFx0aWNvbi5yYW5kb20oKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fSk7XHJcblx0fSxcclxuXHRvbkdldEh1OiBmdW5jdGlvbigpe1xyXG5cdFx0aWYgKHZvaWQgMCAhPT0gY2MuUmVkVC5zZXR0aW5nLnRvcEh1LmRhdGEgJiYgdGhpcy5ub2RlLmFjdGl2ZSkge1xyXG5cdFx0XHRsZXQgcmVzdWx0ID0gY2MuUmVkVC5zZXR0aW5nLnRvcEh1LmRhdGFbJ2FyYiddLmZpbHRlcihmdW5jdGlvbih0ZW1wKXtcclxuXHRcdFx0XHRyZXR1cm4gdGVtcC50eXBlID09IHRoaXMuY3VvYztcclxuXHRcdFx0fS5iaW5kKHRoaXMpKTtcclxuXHRcdFx0bGV0IHMgPSBoZWxwZXIuZ2V0T25seU51bWJlckluU3RyaW5nKHRoaXMuaHUuc3RyaW5nKTtcclxuXHRcdFx0bGV0IGJldCA9IHJlc3VsdFswXS5iZXQ7XHJcblx0XHRcdGlmIChzLWJldCAhPSAwKXtcclxuXHRcdFx0XHRoZWxwZXIubnVtYmVyVG8odGhpcy5odSwgcywgYmV0LCAxNTAwLCB0cnVlKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0sXHJcblx0aGlldVVuZzogZnVuY3Rpb24oKXtcclxuXHRcdGlmICh0aGlzLm5vaHUpIHtcclxuXHRcdFx0dGhpcy5ub2h1ID0gZmFsc2U7XHJcblx0XHRcdC8vIE7hu5UgSMWpXHJcblx0XHRcdGlmICh0aGlzLmlzQXV0byA9PSB0cnVlKSB7XHJcblx0XHRcdFx0dGhpcy5vbkNsaWNrU3RvcCgpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgbm9odSA9IGNjLmluc3RhbnRpYXRlKHRoaXMuUmVkVC5QcmVmYWJOb0h1KTtcclxuXHRcdFx0bm9odSA9IG5vaHUuZ2V0Q29tcG9uZW50KGNjLkFuaW1hdGlvbik7XHJcblx0XHRcdHZhciB0ZXh0ID0gbm9odS5ub2RlLmNoaWxkcmVuWzZdLmdldENvbXBvbmVudChjYy5MYWJlbCk7XHJcblxyXG5cdFx0XHR2YXIgUGxheSA9IGZ1bmN0aW9uKCl7XHJcblx0XHRcdFx0dmFyIGh1b25nID0gY2MuY2FsbEZ1bmMoZnVuY3Rpb24oKXtcclxuXHRcdFx0XHRcdGNjLlJlZFQuYXVkaW8ucGxheUVmKCd3aW5IdScpO1xyXG5cdFx0XHRcdFx0aGVscGVyLm51bWJlclRvKHRleHQsIDAsIHRoaXMud2luLCAxMDAwLCB0cnVlKTtcclxuXHRcdFx0XHR9LCB0aGlzKTtcclxuXHRcdFx0XHRub2h1Lm5vZGUucnVuQWN0aW9uKGNjLnNlcXVlbmNlKGNjLmRlbGF5VGltZSgwLjI1KSwgaHVvbmcpKTtcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdHZhciBGaW5pc2ggPSBmdW5jdGlvbigpe1xyXG5cdFx0XHRcdG5vaHUubm9kZS5kZXN0cm95KCk7XHJcblx0XHRcdFx0dGhpcy5sYWJlbFdpbi5zdHJpbmcgPSBoZWxwZXIubnVtYmVyV2l0aENvbW1hcyh0aGlzLndpbik7XHJcblx0XHRcdFx0dGhpcy53aW4gPSAwO1xyXG5cdFx0XHRcdHRoaXMuaGlldVVuZygpO1xyXG5cdFx0XHR9O1xyXG5cdFx0XHR0aGlzLlJlZFQubm9kZUVmZWN0LmFkZENoaWxkKG5vaHUubm9kZSk7XHJcblx0XHRcdG5vaHUub24oJ3BsYXknLCAgICAgUGxheSwgICB0aGlzKTtcclxuXHRcdFx0bm9odS5vbignZmluaXNoZWQnLCBGaW5pc2gsIHRoaXMpO1xyXG5cdFx0XHRub2h1LnBsYXkoKTtcclxuXHRcdH1lbHNlIGlmICghdGhpcy5ub2h1ICYmIHRoaXMuaXNCaWdXaW4pIHtcclxuXHRcdFx0Ly8gQmlnV2luXHJcblx0XHRcdHRoaXMuaXNCaWdXaW4gPSBmYWxzZTtcclxuXHRcdFx0dmFyIEJpZ1dpbiA9IGNjLmluc3RhbnRpYXRlKHRoaXMuUmVkVC5wcmVmYWJCaWdXaW4pO1xyXG5cdFx0XHRCaWdXaW4gICAgID0gQmlnV2luLmdldENvbXBvbmVudChjYy5BbmltYXRpb24pO1xyXG5cdFx0XHR2YXIgQmlnV2luRmluaXNoID0gZnVuY3Rpb24oKXtcclxuXHRcdFx0XHR0aGlzLmxhYmVsV2luLnN0cmluZyA9IGhlbHBlci5udW1iZXJXaXRoQ29tbWFzKEJpZ1dpbi5ub2RlLmJldCk7XHJcblx0XHRcdFx0QmlnV2luLm5vZGUuZGVzdHJveSgpO1xyXG5cdFx0XHRcdGlmICh0aGlzLmlzQXV0bykge1xyXG5cdFx0XHRcdFx0dGhpcy5vbkdldFNwaW4oKTtcclxuXHRcdCAgICBcdH1lbHNle1xyXG5cdFx0ICAgIFx0XHR0aGlzLm9mZlNwaW4oKTtcclxuXHRcdCAgICBcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRCaWdXaW4ub24oJ2ZpbmlzaGVkJywgQmlnV2luRmluaXNoLCB0aGlzKTtcclxuXHRcdFx0QmlnV2luLm5vZGUuYmV0ID0gdGhpcy53aW47XHJcblx0XHRcdEJpZ1dpbi5ub2RlLnBvc2l0aW9uID0gY2MudjIoMCwgOTgpO1xyXG5cdFx0XHR0aGlzLm5vdGljZS5hZGRDaGlsZChCaWdXaW4ubm9kZSk7XHJcblx0XHRcdHRoaXMud2luID0gMDtcclxuXHRcdFx0aWYgKCF0aGlzLmlzQXV0bykge1xyXG5cdFx0XHRcdHRoaXMub2ZmU3BpbigpO1xyXG5cdFx0XHR9XHJcblx0XHR9ZWxzZSBpZiAoIXRoaXMuaXNCaWdXaW4gJiYgdGhpcy53aW4gPiAwKSB7XHJcblx0XHRcdHZhciBub2RlID0gbmV3IGNjLk5vZGU7XHJcblx0XHRcdG5vZGUuYWRkQ29tcG9uZW50KGNjLkxhYmVsKTtcclxuXHRcdFx0bm9kZSA9IG5vZGUuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKTtcclxuXHRcdFx0aGVscGVyLm51bWJlclRvKG5vZGUsIDAsIHRoaXMud2luLCA2MDAsIHRydWUpO1xyXG5cdFx0XHRub2RlLndpbiA9IHRoaXMud2luO1xyXG5cdFx0XHRub2RlLmZvbnQgPSB0aGlzLnJlZCA/IGNjLlJlZFQudXRpbC5mb250Q29uZyA6IGNjLlJlZFQudXRpbC5mb250VHJ1O1xyXG5cdFx0XHRub2RlLmxpbmVIZWlnaHQgPSAxMzA7XHJcblx0XHRcdG5vZGUuZm9udFNpemUgICA9IDI1O1xyXG5cdFx0XHRub2RlLm5vZGUucG9zaXRpb24gPSBjYy52MigwLCA5OCk7XHJcblx0XHRcdG5vZGUubm9kZS5ydW5BY3Rpb24oY2Muc2VxdWVuY2UoY2MuZGVsYXlUaW1lKDEuNSksIGNjLmNhbGxGdW5jKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHRoaXMubGFiZWxXaW4uc3RyaW5nID0gaGVscGVyLm51bWJlcldpdGhDb21tYXMobm9kZS53aW4pO1xyXG5cdFx0XHRcdG5vZGUubm9kZS5kZXN0cm95KCk7XHJcblx0XHRcdFx0dGhpcy5oaWV1VW5nKCk7XHJcblx0XHRcdFx0dGhpcy5vZmZMaW5lV2luKCk7XHJcblx0XHRcdH0sIHRoaXMpKSk7XHJcblx0XHRcdHRoaXMud2luID0gMDtcclxuXHRcdFx0dGhpcy5ub3RpY2UuYWRkQ2hpbGQobm9kZS5ub2RlKTtcclxuXHRcdFx0dGhpcy5vbkxpbmVXaW4oKTtcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRpZiAodGhpcy5pc0F1dG8pIHtcclxuICAgIFx0XHRcdHRoaXMudGltZU91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuXHRcdFx0XHRcdHRoaXMub25HZXRTcGluKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdC5iaW5kKHRoaXMpLCAzMDApO1xyXG4gICAgXHRcdH1lbHNle1xyXG4gICAgXHRcdFx0dGhpcy5vZmZTcGluKCk7XHJcbiAgICBcdFx0fVxyXG5cdFx0fVxyXG5cdH0sXHJcblx0b25MaW5lV2luOiBmdW5jdGlvbigpe1xyXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0dGhpcy5saW5lX3dpbi5mb3JFYWNoKGZ1bmN0aW9uKG9iail7XHJcblx0XHRcdHNlbGYubGluZS5jaGlsZHJlbltvYmoubGluZS0xXS5hY3RpdmUgPSB0cnVlO1xyXG5cdFx0fSk7XHJcblx0fSxcclxuXHRvZmZMaW5lV2luOiBmdW5jdGlvbigpe1xyXG5cdFx0dGhpcy5saW5lLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24ob2JqKXtcclxuXHRcdFx0b2JqLmFjdGl2ZSA9IGZhbHNlO1xyXG5cdFx0fSk7XHJcblx0fSxcclxufSk7XHJcbiJdfQ==